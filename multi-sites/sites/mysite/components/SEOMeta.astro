---
// SEO Meta component that integrates with site-config
import OpenGraph from './OpenGraph.astro';
import TwitterCard from './TwitterCard.astro';
import type { SiteConfig } from '../lib/site-config.ts';

/*
    Hreflang alternates example:
        <link rel="alternate" hreflang="pt-BR" href="https://vibecode-lovable.com.br/">
        <link rel="alternate" hreflang="en" href="https://vibecode-lovable.com.br/en/">
        <link rel="alternate" hreflang="es" href="https://vibecode-lovable.com.br/es/">
        <link rel="alternate" hreflang="x-default" href="https://vibecode-lovable.com.br/">

    ⚠️ If your project is multilingual or multi-region, you should set these tags in the final site layout or a custom SEO component,
    not directly in SEOMeta.astro, since the logic and URLs may vary per site.
*/

export interface Props {
    siteConfig: SiteConfig;
    title?: string;
    description?: string;
    pageUrl?: string;
    ogImage?: string;
    noIndex?: boolean;
    canonical?: string;
    enhancedIndexing?: boolean;  // Opt-in for rich snippets and prominent search results
    type?: 'website' | 'article' | 'book' | 'profile' | 
           'music.song' | 'music.album' | 'music.playlist' | 'music.radio_station' |
           'video.movie' | 'video.episode' | 'video.tv_show' | 'video.other' |
           'business.business' | 'place' | 'restaurant.menu' | 'restaurant.menu_item' | 
           'restaurant.menu_section' | 'restaurant.restaurant' |
           'product' | 'product.group' | 'product.item' |
           'game.achievement' | 'fitness.course';           // Content type (website, article, product, etc.)
    
    // OpenGraph article-specific properties
    author?: string;         // Author name for articles
    publishedTime?: string;  // ISO date string (e.g., "2024-01-15T10:00:00Z")
    modifiedTime?: string;   // ISO date string for last modification
    section?: string;        // Article section/category
    tags?: string[];         // Array of tags
}

const { 
    siteConfig,
    title,
    description,
    pageUrl,
    ogImage,
    noIndex = false,
    canonical,
    enhancedIndexing = false,
    type = 'website',
    author,
    publishedTime,
    modifiedTime,
    section,
    tags
} = Astro.props;

// Use page-specific values or fallback to site config
const metaDescription = description || siteConfig.seo.description;
const metaImage = ogImage || siteConfig.seo.ogImage;
const fullUrl = pageUrl || `https://${siteConfig.domain}`;
const canonicalUrl = canonical || fullUrl;

// Build complete image URL if it's a relative path
const fullImageUrl = metaImage.startsWith('http') 
    ? metaImage 
    : `https://${siteConfig.domain}${metaImage}`;
---


<meta name="title" content={title || siteConfig.seo.title} />
<meta name="description" content={metaDescription} />
<meta name="keywords" content={siteConfig.seo.keywords.join(', ')} />
<meta name="author" content={author || siteConfig.seo.author} />

<link rel="canonical" href={canonicalUrl} />


<link rel="alternate" hreflang="x-default" href={fullUrl} />

{siteConfig.verification?.googleSiteVerification && (
    <meta name="google-site-verification" content={siteConfig.verification.googleSiteVerification} />
)}

{noIndex && <meta name="robots" content="noindex, nofollow" />}

{enhancedIndexing && !noIndex && (
    <meta name="robots" content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" />
)}



<meta name="language" content={siteConfig.language} />



<OpenGraph 
    title={siteConfig.seo.title}
    description={metaDescription}
    url={fullUrl}
    image={fullImageUrl}
    siteName={siteConfig.name}
    type={type}
    locale={siteConfig.language.replace('-', '_')}
    author={author}
    publishedTime={publishedTime}
    modifiedTime={modifiedTime}
    section={section}
    tags={tags}
/>


<TwitterCard 
    title={title || siteConfig.seo.title}
    description={metaDescription}
    image={fullImageUrl}
    url={fullUrl}
    site={siteConfig.socialMedia.twitter}
/>


{siteConfig.seo.themeColor ? (
    <meta name="theme-color" content={siteConfig.seo.themeColor} />
) : siteConfig.primaryColor ? (
    <meta name="theme-color" content={siteConfig.primaryColor} />
) : null}

{siteConfig.seo.msTileColor ? (
    <meta name="msapplication-TileColor" content={siteConfig.seo.msTileColor} />
) : siteConfig.primaryColor ? (
    <meta name="msapplication-TileColor" content={siteConfig.primaryColor} />
) : null}

{siteConfig.seo.msTileConfig && (
    <meta name="msapplication-config" content={siteConfig.seo.msTileConfig} />
)}

{siteConfig.seo.applicationName && (
    <meta name="application-name" content={siteConfig.seo.applicationName} />
)}

{siteConfig.seo.appleMobileWebAppCapable && (
    <meta name="apple-mobile-web-app-capable" content={siteConfig.seo.appleMobileWebAppCapable} />
)}

{siteConfig.seo.appleMobileWebAppStatusBarStyle && (
    <meta name="apple-mobile-web-app-status-bar-style" content={siteConfig.seo.appleMobileWebAppStatusBarStyle} />
)}

{siteConfig.seo.formatDetection && (
    <meta name="format-detection" content={siteConfig.seo.formatDetection} />
)}


{siteConfig.seo.geoRegion && (
    <meta name="geo.region" content={siteConfig.seo.geoRegion} />
)}
{siteConfig.seo.geoCountry && (
    <meta name="geo.country" content={siteConfig.seo.geoCountry} />
)}
{siteConfig.seo.geoPlacename && (
    <meta name="geo.placename" content={siteConfig.seo.geoPlacename} />
)}
