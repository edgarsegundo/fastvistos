---
import JsonLdReviews from './JsonLdReviews.astro';

const {
  site,
  faqList = [],
  servicesList = [],
  reviewsList = [],
  breadcrumbList = [],
  disableFAQ = false,
  disableServices = false,
  disableReviews = false,
  disableBreadcrumb = false,
  disableWebSite = false,
  disableOrganization = false,
  disableImageObject = false,
  disableWebPage = false,
  disableWebSiteSearchAction = true,
  ...rest
} = Astro.props;

const homepageUrl = site?.domain ? `https://${site?.domain}` : '';
const siteName = site?.name;
const description = site?.description;
const org = site?.organization ?? {
  name: siteName,
  url: homepageUrl,
  logo: site?.logo
};
const websiteId = `${homepageUrl}#website`;
const orgId = `${homepageUrl}#organization`;
const imageId = `${homepageUrl}#primaryimage`;
const breadcrumbId = `${homepageUrl}#breadcrumb`;
const logoId = `${homepageUrl}#/schema/logo/image/`;

// WebPage block
const webPageBlock = !disableWebPage && {
  '@type': 'WebPage',
  '@id': homepageUrl,
  'url': homepageUrl,
  'name': siteName,
  'isPartOf': { '@id': websiteId },
  'about': { '@id': orgId },
  'primaryImageOfPage': { '@id': imageId },
  'image': { '@id': imageId },
  ...(site?.thumbnailUrl
    ? { 'thumbnailUrl': site.thumbnailUrl }
    : site?.image
    ? { 'thumbnailUrl': site.image }
    : {}),
  ...(site.datePublished ? { 'datePublished': site.datePublished } : {}),
  ...(site.dateModified ? { 'dateModified': site.dateModified } : {}),
  ...(description ? { 'description': description } : {}),
  'breadcrumb': { '@id': breadcrumbId },
  'inLanguage': site.language || 'pt-BR',
  'potentialAction': [
    {
      '@type': 'ReadAction',
      'target': [homepageUrl]
    }
  ]
};

// ImageObject (primary image)
const imageObjectBlock = !disableImageObject && site?.image && {
  '@type': 'ImageObject',
  'inLanguage': site.language,
  '@id': imageId,
  'url': site.image,
  'contentUrl': site.image
};

// BreadcrumbList
const breadcrumbBlock = !disableBreadcrumb && {
  '@type': 'BreadcrumbList',
  '@id': breadcrumbId,
  'itemListElement': breadcrumbList.length > 0
    ? breadcrumbList
    : [
        {
          '@type': 'ListItem',
          'position': 1,
          'name': 'Home'
        }
      ]
};

// WebSite
const webSiteBlock = !disableWebSite && {
  '@type': 'WebSite',
  '@id': websiteId,
  'url': homepageUrl,
  'name': siteName,
  'description': description ?? '',
  'publisher': { '@id': orgId },
  ...(!disableWebSiteSearchAction
    ? {
        'potentialAction': [
          {
            '@type': 'SearchAction',
            'target': {
              '@type': 'EntryPoint',
              'urlTemplate': `${homepageUrl}?s={search_term_string}`
            },
            'query-input': {
              '@type': 'PropertyValueSpecification',
              'valueRequired': true,
              'valueName': 'search_term_string'
            }
          }
        ]
      }
    : {}),
  'inLanguage': site.language
};

// Organization (with logo as ImageObject)
const orgBlock = !disableOrganization && {
  '@type': 'Organization',
  '@id': orgId,
  'name': org.name,
  'url': org.url,
  'logo': {
    '@type': 'ImageObject',
    'inLanguage': site.language,
    '@id': logoId,
    'url': org.logo,
    'contentUrl': org.logo,
    ...(org.logoWidth ? { 'width': org.logoWidth } : {}),
    ...(org.logoHeight ? { 'height': org.logoHeight } : {}),
    ...(org.name ? { 'caption': org.name } : {})
  },
  'image': { '@id': logoId }
};

// FAQ block
const faqBlock = !disableFAQ && Array.isArray(faqList) && faqList.length > 0 ? {
  '@type': 'FAQPage',
  'mainEntity': faqList.map((faq) => ({
    '@type': 'Question',
    'name': faq.question,
    'acceptedAnswer': {
      '@type': 'Answer',
      'text': faq.answer
    }
  }))
} : null;

// Services block
const servicesBlock = !disableServices && Array.isArray(servicesList) && servicesList.length > 0
  ? servicesList.map((service) =>
      service.schema
        ? service.schema
        : {
            '@type': 'Service',
            'name': service.name,
            'description': service.description,
            ...(service.offers ? { offers: service.offers } : {}),
            provider: { '@id': orgId }
          }
    )
  : null;

// VideoObjects independentes para reviews em vídeo
const videoObjects = !disableReviews && Array.isArray(reviewsList) && reviewsList.length > 0
  ? reviewsList
      .filter((review) => review.videoId && review.thumbnail && review.url)
      .map((review, idx) => {
        // Ensure uploadDate is in ISO 8601 with timezone (e.g., 2023-05-02T00:00:00-03:00)
        let uploadDate = review.uploadDate;
        if (uploadDate && !uploadDate.includes('T')) {
          uploadDate = `${uploadDate}T00:00:00-03:00`;
        }
        return {
          '@type': 'VideoObject',
          '@id': `${homepageUrl}#review-video-${idx+1}`,
          name: review.title || '',
          description: review.reviewBody || review.title || '',
          thumbnailUrl: review.thumbnail,
          contentUrl: review.url,
          embedUrl: `https://www.youtube.com/embed/${review.videoId}`,
          ...(uploadDate ? { uploadDate } : {}),
          publisher: {
            '@type': 'Organization',
            name: siteName,
            logo: {
              '@type': 'ImageObject',
              url: site?.logo
            }
          },
          mainEntityOfPage: {
            '@type': 'WebPage',
            '@id': homepageUrl
          }
        };
      })
  : [];
const reviewsBlock = !disableReviews && Array.isArray(reviewsList) && reviewsList.length > 0
  ? reviewsList.map((review, idx) => {
      const reviewBody = review.reviewBody || review.title || 'Ótimo serviço!';
      const base = {
        '@type': 'Review',
        reviewBody,
        author: {
          '@type': 'Person',
          name: review.author || `Cliente ${siteName}`,
        },
        reviewRating: {
          '@type': 'Rating',
          ratingValue: review.ratingValue || 5,
          bestRating: 5,
          worstRating: 1,
        },
        mainEntityOfPage: {
          '@type': 'WebPage',
          '@id': homepageUrl
        }
      };
      if (review.videoId && review.thumbnail && review.url) {
        return {
          ...base,
          associatedMedia: {
            '@id': `${homepageUrl}#review-video-${idx+1}`
          }
        };
      }
      return base;
    })
  : [];


// AggregateRating calculation
let aggregateRating = null;
if (reviewsBlock.length > 0) {
  const ratings = reviewsBlock.map(r => (r.reviewRating && r.reviewRating.ratingValue) ? Number(r.reviewRating.ratingValue) : 5);
  const reviewCount = ratings.length;
  const ratingValue = reviewCount > 0 ? (ratings.reduce((a, b) => a + b, 0) / reviewCount) : 5;
  aggregateRating = {
    '@type': 'AggregateRating',
    ratingValue: Number(ratingValue.toFixed(1)),
    reviewCount
  };
}

// LocalBusiness principal com reviews agrupados, aggregateRating, address obrigatório e mainEntityOfPage
const localBusinessBlock = !disableOrganization && {
  '@type': 'LocalBusiness',
  '@id': orgId,
  name: siteName,
  url: homepageUrl,
  logo: {
    '@type': 'ImageObject',
    'inLanguage': site.language,
    '@id': logoId,
    'url': site?.logo,
    'contentUrl': site?.logo,
    ...(org.logoWidth ? { 'width': org.logoWidth } : {}),
    ...(org.logoHeight ? { 'height': org.logoHeight } : {}),
    ...(org.name ? { 'caption': org.name } : {})
  },
  image: { '@id': logoId },
  address: site?.address || {
    '@type': 'PostalAddress',
    streetAddress: 'Rua Exemplo, 123',
    addressLocality: 'São Paulo',
    addressRegion: 'SP',
    postalCode: '01234-567',
    addressCountry: 'BR'
  },
  telephone: site?.contactPoint?.telephone || '+55 11 99999-9999',
  contactPoint: site?.contactPoint || {
    '@type': 'ContactPoint',
    telephone: site?.contactPoint?.telephone || '+55 11 99999-9999',
    contactType: 'customer service',
    areaServed: 'BR',
    availableLanguage: ['Portuguese', 'English']
  },
  ...(reviewsBlock.length > 0 ? { review: reviewsBlock } : {}),
  ...(aggregateRating && reviewsBlock.length > 1 ? { aggregateRating } : {}),
  priceRange: site?.priceRange || '$$',
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': homepageUrl
  }
};

const blocks = [
  webPageBlock,
  imageObjectBlock,
  breadcrumbBlock,
  webSiteBlock,
  orgBlock,
  localBusinessBlock,
  faqBlock,
  servicesBlock,
  ...videoObjects
].filter(Boolean).flat();

const jsonLdGraph = {
  '@context': 'https://schema.org',
  '@graph': blocks
};
---

<script type="application/ld+json" set:html={JSON.stringify(jsonLdGraph, null, 2)}></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('div[updatable_div_uuid]').forEach(section_div_wrapper => {
        // Create wrapper div for positioning
        const wrapper = document.createElement('div');
        wrapper.className = 'uuid-edit-link-wrapper';
        Object.assign(wrapper.style, {
          position: 'relative',
          height: '0',
          display: 'flex',
          justifyContent: 'flex-end'
        });

        // Create the button
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.textContent = '✏️ Editar HTML';
        btn.className = 'uuid-edit-link';
        Object.assign(btn.style, {
          position: 'absolute',
          top: '0',
          right: '16px',
          zIndex: 1000,
          background: '#fff',
          padding: '2px 8px',
          borderRadius: '4px',
          fontSize: '12px',
          textDecoration: 'none',
          boxShadow: '0 1px 4px rgba(0,0,0,0.1)',
          border: '1px solid #ddd',
          cursor: 'pointer'
        });

        btn.addEventListener('click', function (e) {
            e.preventDefault();
            showModal(section_div_wrapper);
            return false;
        });

        wrapper.appendChild(btn);
        section_div_wrapper.parentNode.insertBefore(wrapper, section_div_wrapper);
    });
    function showModal(section_div_wrapper) {
        document.querySelectorAll('.uuid-modal').forEach(m => m.remove());
        const modal = document.createElement('div');
        modal.className = 'uuid-modal';
        Object.assign(modal.style, {
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100vw',
          height: '100vh',
          background: 'rgba(0,0,0,0.4)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 9999
        });
        const modalContent = document.createElement('div');
        Object.assign(modalContent.style, {
          background: '#fff',
          padding: '24px',
          borderRadius: '8px',
          width: '90vw',
          maxWidth: '700px',
          boxShadow: '0 4px 32px rgba(0,0,0,0.2)',
          position: 'relative'
        });
        const closeBtn = document.createElement('button');
        closeBtn.textContent = '×';
        Object.assign(closeBtn.style, {
          position: 'absolute',
          top: '8px',
          right: '12px',
          fontSize: '24px',
          background: 'none',
          border: 'none',
          cursor: 'pointer',
          color: '#111'
        });
        closeBtn.onclick = () => modal.remove();
        // Close modal if user clicks outside modalContent
        modal.addEventListener('mousedown', function(e) {
          if (!modalContent.contains(e.target)) {
            modal.remove();
          }
        });
        // Modal title using updatable_div_name
        const modalTitle = document.createElement('div');
        modalTitle.textContent = section_div_wrapper.getAttribute('updatable_div_name') || 'Editar HTML';
        Object.assign(modalTitle.style, {
          marginBottom: '8px',
          fontWeight: 'bold',
          fontSize: '1.3em',
          textAlign: 'center',
          color: '#000',
        });

        const label = document.createElement('div');
        label.textContent = `Edição de HTML`;
        Object.assign(label.style, {
          marginBottom: '8px',
          fontWeight: 'bold',
          fontSize: '0.95em',
          color: '#666',
          textAlign: 'center'
        });
        const textarea = document.createElement('textarea');
        Object.assign(textarea.style, {
          width: '100%',
          height: '300px',
          color: '#222',
          background: '#fff'
        });
        textarea.value = section_div_wrapper.innerHTML;
        const updateBtn = document.createElement('button');
        updateBtn.type = 'button';
        updateBtn.textContent = 'Update';
        Object.assign(updateBtn.style, {
          marginTop: '12px',
          padding: '8px 16px',
          background: '#0070f3',
          color: '#fff',
          border: 'none',
          borderRadius: '4px',
          cursor: 'pointer'
        });
        updateBtn.onclick = () => {
            modal.remove();
            section_div_wrapper.innerHTML = textarea.value.trim();
        };

  modalContent.appendChild(closeBtn);
  modalContent.appendChild(modalTitle);
  modalContent.appendChild(label);
  modalContent.appendChild(textarea);
  modalContent.appendChild(updateBtn);
        modal.appendChild(modalContent);
        document.body.appendChild(modal);
    }
});
</script>
