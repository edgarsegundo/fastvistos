---
import { SiteConfigHelper } from '../lib/site-config-helper.ts';

const title = "Documentation Viewer";
const siteConfig = await SiteConfigHelper.loadSiteConfig();
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - {siteConfig.name}</title>
    
    <!-- Marked.js for markdown rendering -->
    <script src="https://cdn.jsdelivr.net/npm/marked@9.1.2/marked.min.js"></script>
    
    <!-- Editor.md CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/css/editormd.min.css" />
    
    <!-- Import custom styles -->
    <link rel="stylesheet" href="/css/markdown-doc.css">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
            color: white;
        }

        .main-content {
            display: grid;
            grid-template-columns: 350px 1fr;
            gap: 2rem;
            background: white;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            min-height: 80vh;
        }

        .sidebar {
            background: #f8fafc;
            padding: 2rem;
            border-right: 1px solid #e2e8f0;
        }

        .search-box {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            margin-bottom: 1.5rem;
            font-size: 0.9rem;
        }

        .search-box:focus {
            outline: none;
            border-color: #667eea;
        }

        .doc-category {
            margin-bottom: 1.5rem;
        }

        .category-title {
            font-weight: 600;
            font-size: 0.9rem;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 0.5rem;
            padding: 0.5rem 0;
            border-bottom: 1px solid #e2e8f0;
        }

        .doc-item {
            padding: 0.75rem;
            cursor: pointer;
            border-radius: 8px;
            margin-bottom: 0.25rem;
            transition: all 0.2s ease;
            border: 1px solid transparent;
        }

        .doc-item:hover {
            background: #f1f5f9;
            border-color: #e2e8f0;
        }

        .doc-item.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: transparent;
        }

        .doc-title {
            font-weight: 500;
            font-size: 0.9rem;
        }

        .viewer-container {
            background: white;
            display: flex;
            flex-direction: column;
        }

        .viewer-header {
            background: white;
            padding: 1.5rem 2rem;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .viewer-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1e293b;
        }

        .action-buttons {
            display: flex;
            gap: 0.75rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #f1f5f9;
            color: #64748b;
            border: 1px solid #e2e8f0;
        }

        .btn-secondary:hover {
            background: #e2e8f0;
        }

        .content-display {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        }

        .welcome-message {
            text-align: center;
            padding: 4rem 2rem;
            color: #64748b;
        }

        .welcome-message h2 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #1e293b;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #64748b;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Fullscreen mode */
        .fullscreen-mode {
            position: fixed !important;
            top: 0 !important;
            left: 0 !important;
            width: 100vw !important;
            height: 100vh !important;
            background: white !important;
            z-index: 9999 !important;
            overflow-y: auto !important;
            padding: 0 !important;
            margin: 0 !important;
            border-radius: 0 !important;
            box-shadow: none !important;
        }

        body.fullscreen-active .container > *:not(.main-content) {
            display: none !important;
        }

        body.fullscreen-active .main-content .sidebar {
            display: none !important;
        }

        body.fullscreen-active .main-content .viewer-container .viewer-header {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        body.fullscreen-active .viewer-container {
            background: transparent !important;
            box-shadow: none !important;
            padding: 0 !important;
        }

        /* Editor container */
        #editorContainer {
            width: 100%;
            height: 70vh;
            display: none;
        }

        .fullscreen-mode #editorContainer {
            height: 100vh !important;
            display: block !important;
        }

        .fullscreen-mode #defaultContent {
            display: none !important;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{title}</h1>
            <p>Browse and edit documentation with live preview</p>
        </div>

        <div class="main-content">
            <div class="sidebar">
                <input type="text" id="searchBox" class="search-box" placeholder="Search documentation...">
                <div id="documentList"></div>
            </div>

            <div class="viewer-container">
                <div class="viewer-header">
                    <h2 id="viewerTitle" class="viewer-title">Select a document</h2>
                    <div class="action-buttons">
                        <button id="downloadBtn" class="btn btn-secondary" style="display: none;">
                            <span>📥</span>
                            Download
                        </button>
                        <button id="expandBtn" class="btn btn-primary" style="display: none;">
                            <span id="expandIcon">⛶</span>
                            <span id="expandText">Editor Mode</span>
                        </button>
                    </div>
                </div>

                <div id="welcomeMessage" class="welcome-message">
                    <h2>Welcome to Documentation Viewer</h2>
                    <p>Select a document from the sidebar to start reading or editing.</p>
                </div>

                <div id="contentDisplay" class="content-display" style="display: none;">
                    <div id="defaultContent"></div>
                    <div id="editorContainer" style="display: none;">
                        <div id="editor-md"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        class SimpleDocumentationViewer {
            constructor() {
                this.documents = [];
                this.documentsByFolder = {};
                this.currentDoc = null;
                this.editor = null;
                this.init();
            }

            async init() {
                await this.loadDocumentList();
                this.setupEventListeners();
                this.setupSearch();
            }

            async loadDocumentList() {
                try {
                    this.documents = [
                        {
                            path: 'getting-started.md',
                            title: 'Getting Started',
                            category: 'Guides',
                            content: '# Getting Started\\n\\nWelcome to our documentation!\\n\\n## Introduction\\n\\nThis is a **sample document** to demonstrate functionality.\\n\\n### Features\\n\\n- Live preview\\n- Syntax highlighting\\n- Split-screen editing\\n- Export functionality'
                        },
                        {
                            path: 'api-reference.md',
                            title: 'API Reference',
                            category: 'Reference', 
                            content: '# API Reference\\n\\n## Authentication\\n\\nAll API requests require authentication using API keys.\\n\\n### Example\\n\\nUse your API key in the Authorization header.'
                        },
                        {
                            path: 'troubleshooting.md',
                            title: 'Troubleshooting',
                            category: 'Guides',
                            content: '# Troubleshooting\\n\\n## Common Issues\\n\\n### Authentication Failed\\n\\n**Problem:** Getting 401 errors.\\n\\n**Solution:**\\n1. Check your API key\\n2. Verify the key is not expired'
                        }
                    ];
                    
                    this.documentsByFolder = this.documents.reduce((acc, doc) => {
                        if (!acc[doc.category]) acc[doc.category] = [];
                        acc[doc.category].push(doc);
                        return acc;
                    }, {});

                    this.renderDocumentList();
                } catch (error) {
                    console.error('Error loading documents:', error);
                }
            }

            renderDocumentList() {
                const container = document.getElementById('documentList');
                container.innerHTML = '';

                Object.keys(this.documentsByFolder).forEach(category => {
                    const categoryDiv = document.createElement('div');
                    categoryDiv.className = 'doc-category';
                    
                    categoryDiv.innerHTML = `
                        <div class="category-title">${category}</div>
                        ${this.documentsByFolder[category].map(doc => `
                            <div class="doc-item" data-path="${doc.path}" data-title="${doc.title}">
                                <div class="doc-title">${doc.title}</div>
                            </div>
                        `).join('')}
                    `;
                    
                    container.appendChild(categoryDiv);
                });
            }

            setupEventListeners() {
                // Document selection
                document.addEventListener('click', (e) => {
                    const docItem = e.target.closest('.doc-item');
                    if (docItem) {
                        const path = docItem.dataset.path;
                        const title = docItem.dataset.title;
                        this.selectDocument(path, title);
                    }
                });

                // Download button
                document.getElementById('downloadBtn').addEventListener('click', () => {
                    this.downloadDocument();
                });

                // Expand/Editor button
                document.getElementById('expandBtn').addEventListener('click', () => {
                    this.toggleFullscreen();
                });
            }

            setupSearch() {
                const searchBox = document.getElementById('searchBox');
                searchBox.addEventListener('input', (e) => {
                    this.filterDocuments(e.target.value);
                });
            }

            filterDocuments(query) {
                const items = document.querySelectorAll('.doc-item');
                const categories = document.querySelectorAll('.doc-category');
                
                items.forEach(item => {
                    const fileName = item.dataset.title.toLowerCase();
                    const matches = fileName.includes(query.toLowerCase());
                    item.style.display = matches ? 'block' : 'none';
                });

                categories.forEach(category => {
                    const visibleItems = category.querySelectorAll('.doc-item[style*="block"], .doc-item:not([style*="none"])');
                    category.style.display = visibleItems.length > 0 ? 'block' : 'none';
                });
            }

            async selectDocument(path, title) {
                try {
                    console.log('Selecting document:', path, title);
                    
                    // Update UI
                    document.querySelectorAll('.doc-item').forEach(item => {
                        item.classList.remove('active');
                    });
                    
                    const selectedItem = document.querySelector(`[data-path="${path}"]`);
                    if (selectedItem) {
                        selectedItem.classList.add('active');
                    }
                    
                    // Safe element updates
                    const viewerTitle = document.getElementById('viewerTitle');
                    const welcomeMessage = document.getElementById('welcomeMessage');
                    const contentDisplay = document.getElementById('contentDisplay');
                    const downloadBtn = document.getElementById('downloadBtn');
                    const expandBtn = document.getElementById('expandBtn');
                    
                    if (viewerTitle) viewerTitle.textContent = title;
                    if (welcomeMessage) welcomeMessage.style.display = 'none';
                    if (contentDisplay) contentDisplay.style.display = 'block';
                    if (downloadBtn) downloadBtn.style.display = 'inline-block';
                    if (expandBtn) expandBtn.style.display = 'inline-block';
                    
                    // Show loading
                    this.showLoading();
                    
                    // Find document
                    const doc = this.documents.find(d => d.path === path);
                    if (!doc) {
                        throw new Error('Document not found');
                    }
                    
                    const content = doc.content.replace(/\\n/g, '\\n');
                    this.currentDoc = { path, title, content };
                    
                    // Render content
                    this.renderContent(content);
                    
                } catch (error) {
                    console.error('Error loading document:', error);
                    this.showError('Failed to load document. Please try again.');
                }
            }

            renderContent(markdownContent) {
                try {
                    const marked = window['marked'];
                    if (!marked) {
                        console.error('Marked.js not loaded');
                        this.showError('Markdown parser not available');
                        return;
                    }
                    
                    const htmlContent = marked.parse(markdownContent);
                    const defaultContent = document.getElementById('defaultContent');
                    const contentDisplay = document.getElementById('contentDisplay');
                    
                    if (defaultContent && contentDisplay) {
                        defaultContent.innerHTML = htmlContent;
                        contentDisplay.className = 'content-display doc-content';
                    }
                } catch (error) {
                    console.error('Error rendering markdown:', error);
                    const defaultContent = document.getElementById('defaultContent');
                    if (defaultContent) {
                        defaultContent.innerHTML = `<pre style="white-space: pre-wrap;">${markdownContent}</pre>`;
                    }
                }
            }

            showLoading() {
                const contentDisplay = document.getElementById('contentDisplay');
                if (contentDisplay) {
                    contentDisplay.innerHTML = `
                        <div class="loading">
                            <div class="spinner"></div>
                            Loading document...
                        </div>
                    `;
                }
            }

            downloadDocument() {
                if (!this.currentDoc) return;
                
                const blob = new Blob([this.currentDoc.content], { type: 'text/markdown' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = this.currentDoc.path.split('/').pop();
                a.click();
                URL.revokeObjectURL(url);
            }

            async loadEditorDependencies() {
                if (window.editormdLoaded) return true;
                
                try {
                    await this.loadScript('https://cdn.jsdelivr.net/npm/jquery@3.6.0/jquery.min.js');
                    await this.loadScript('https://cdn.jsdelivr.net/npm/editor.md@1.5.0/editormd.min.js');
                    
                    window.editormdLoaded = true;
                    return true;
                } catch (error) {
                    console.error('Failed to load editor dependencies:', error);
                    return false;
                }
            }

            loadScript(src) {
                return new Promise((resolve, reject) => {
                    const script = document.createElement('script');
                    script.src = src;
                    script.onload = resolve;
                    script.onerror = reject;
                    document.head.appendChild(script);
                });
            }

            async toggleFullscreen() {
                const contentDisplay = document.getElementById('contentDisplay');
                const expandBtn = document.getElementById('expandBtn');
                const expandIcon = document.getElementById('expandIcon');
                const expandText = document.getElementById('expandText');
                
                if (!contentDisplay.classList.contains('fullscreen-mode')) {
                    // Enter fullscreen - try to load editor
                    const loaded = await this.loadEditorDependencies();
                    if (loaded && this.currentDoc) {
                        await this.initializeEditor();
                    }
                    
                    contentDisplay.classList.add('fullscreen-mode');
                    document.body.classList.add('fullscreen-active');
                    expandBtn.classList.add('active');
                    expandIcon.textContent = '❌';
                    expandText.textContent = 'Exit Editor';
                    document.body.style.overflow = 'hidden';
                } else {
                    // Exit fullscreen
                    contentDisplay.classList.remove('fullscreen-mode');
                    document.body.classList.remove('fullscreen-active');
                    expandBtn.classList.remove('active');
                    expandIcon.textContent = '⛶';
                    expandText.textContent = 'Editor Mode';
                    document.body.style.overflow = 'auto';
                    
                    // Show default content
                    const defaultContent = document.getElementById('defaultContent');
                    const editorContainer = document.getElementById('editorContainer');
                    if (defaultContent) defaultContent.style.display = 'block';
                    if (editorContainer) editorContainer.style.display = 'none';
                    
                    if (this.editor) {
                        this.editor = null;
                    }
                }
            }

            async initializeEditor() {
                if (!this.currentDoc) return;
                
                const editorContainer = document.getElementById('editorContainer');
                const defaultContent = document.getElementById('defaultContent');
                
                if (editorContainer && defaultContent) {
                    defaultContent.style.display = 'none';
                    editorContainer.style.display = 'block';
                    
                    editorContainer.innerHTML = `
                        <div id="editor-md">
                            <textarea style="display:none;">${this.currentDoc.content}</textarea>
                        </div>
                    `;
                    
                    setTimeout(() => {
                        if (window.editormd) {
                            this.editor = window.editormd("editor-md", {
                                width: "100%",
                                height: "100vh",
                                path: "https://cdn.jsdelivr.net/npm/editor.md@1.5.0/lib/",
                                theme: "default",
                                previewTheme: "default", 
                                editorTheme: "default",
                                markdown: this.currentDoc.content,
                                codeFold: true,
                                syncScrolling: "single",
                                saveHTMLToTextarea: true,
                                searchReplace: true,
                                watch: true,
                                htmlDecode: "style,script,iframe|on*",
                                toolbar: true,
                                previewCodeHighlight: true,
                                emoji: true,
                                taskList: true,
                                tocm: true,
                                tex: true,
                                flowChart: true,
                                sequenceDiagram: true,
                                dialogLockScreen: false,
                                onload: () => {
                                    console.log('Editor.md loaded successfully!');
                                }
                            });
                        }
                    }, 500);
                }
            }

            showError(message) {
                const contentDisplay = document.getElementById('contentDisplay');
                const welcomeMessage = document.getElementById('welcomeMessage');
                
                if (contentDisplay) {
                    contentDisplay.innerHTML = `
                        <div style="padding: 20px; text-align: center; color: #dc3545;">
                            <h3>Error</h3>
                            <p>${message}</p>
                        </div>
                    `;
                    contentDisplay.style.display = 'block';
                }
                
                if (welcomeMessage) {
                    welcomeMessage.style.display = 'none';
                }
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM loaded, initializing viewer...');
            new SimpleDocumentationViewer();
        });
    </script>
</body>
</html>
