---
/**
 * JsonLdBlogIndex.astro
 * Dynamically generates JSON-LD for the blog index page using live data from BlogService.
 * - Uses siteConfig for domain and organization info
 * - Uses BlogService.getTopicsWithArticles() for topics and articles
 * - Outputs a <script type="application/ld+json"> in the head
 *
 * This component is generic and will be copied to each site's components/ folder.
 */
import { getWebSiteBlock } from './JsonLdWebSiteBlock.astro';
import { getOrganizationBlock } from './JsonLdOrganizationBlock.astro';
import { getWebPageBlock } from './JsonLdWebPageBlock.astro';
// import { siteConfig } from '../site-config.ts';
import { BlogService } from '../lib/blog-service.ts';

const {
    site,
    blogPageConfig,
    breadcrumbList = [],
    disableBreadcrumb = false,
    disableWebSite = false,
    disableOrganization = false,
    disableWebPage = false,
    disableWebSiteSearchAction = true,
    ...rest
} = Astro.props;

const topicsWithArticles = await BlogService.getTopicsWithArticles();
const homepageUrl = site.domain.startsWith('http')
    ? site.domain
    : `https://${site.domain}`;
const orgId = `${homepageUrl}/#organization`;
const websiteId = `${homepageUrl}/#website`;
const imageId = `${homepageUrl}#primaryimage`;
const breadcrumbId = `${homepageUrl}#breadcrumb`;
const description = blogPageConfig?.seo?.description || site.description || '';
const siteName = site?.name;

const itemLists = topicsWithArticles.map((topic: any) => ({
    '@type': 'ItemList',
    name: topic.title,
    itemListElement: topic.blog_article.map((article: any, idx: number) => ({
        '@type': 'ListItem',
        position: idx + 1,
        item: {
            '@type': 'BlogPosting',
            '@id': `${homepageUrl}/blog/${article.slug}`,
            headline: article.title,
            url: `${homepageUrl}/blog/${article.slug}`,
            image: article.image
                ? `${homepageUrl}/assets/images/blog/${article.image.replace(/^.*\//, '')}`
                : undefined,
            datePublished: article.published,
            dateModified: article.updated || article.published,
            inLanguage: 'pt-BR',
            description: article.description || '',
        },
    })),
}));

// WebPage block
const webPageBlock = getWebPageBlock({
    disableWebPage,
    homepageUrl,
    siteName,
    websiteId,
    orgId,
    imageId,
    breadcrumbId,
    site,
    description,
});

const blocks = [
    webPageBlock,
    // imageObjectBlock,
    // breadcrumbBlock,
    // webSiteBlock,
    // orgBlock,
    // localBusinessBlock,
]
    .filter(Boolean)
    .flat();

const jsonLdGraph = {
    '@context': 'https://schema.org',
    '@graph': blocks,
};

// const jsonLd = {
//     '@context': 'https://schema.org',
//     '@graph': [
//         {
//             '@type': ['WebPage', 'CollectionPage'],
//             '@id': pageId,
//             url: `${domain}/blog/`,
//             name: `Blog - ${siteConfig.site.name}`,
//             isPartOf: { '@id': websiteId },
//             description: siteConfig.blogPageConfig.seo.description || '',
//             inLanguage: 'pt-BR',
//             publisher: { '@id': orgId },
//             hasPart: itemLists,
//         },
//         {
//             '@type': 'WebSite',
//             '@id': websiteId,
//             url: domain + '/',
//             name: siteConfig.site.name,
//             description: siteConfig.site.description || '',
//             publisher: { '@id': orgId },
//             inLanguage: 'pt-BR',
//         },
//         {
//             '@type': 'Organization',
//             '@id': orgId,
//             name: siteConfig.site.name,
//             url: domain + '/',
//             logo: {
//                 '@type': 'ImageObject',
//                 url: siteConfig.site.logo,
//             },
//         },
//     ],
// };

---

<script type="application/ld+json" set:html={JSON.stringify(jsonLdGraph, null, 2)} />
