---
/**
 * JsonLdBlogIndex.astro
 * Dynamically generates JSON-LD for the blog index page using live data from BlogService.
 * - Uses siteConfig for domain and organization info
 * - Uses BlogService.getTopicsWithArticles() for topics and articles
 * - Outputs a <script type="application/ld+json"> in the head
 *
 * This component is generic and will be copied to each site's components/ folder.
 */
import { getWebSiteBlock } from './JsonLdWebSiteBlock.astro';
import { getOrganizationBlock } from './JsonLdOrganizationBlock.astro';
import { getWebPageBlock } from './JsonLdWebPageBlock.astro';
import { getBreadcrumbBlock } from './JsonLdBreadcrumbBlock.astro';
import { getImageObjectBlock } from './JsonLdImageObjectBlock.astro';
import { BlogService } from '../lib/blog-service.ts';

const {
    site,
    description,
    image,
    imageUrl,
    imageCaption,
    imageHeight,
    imageWidth,
    breadcrumbList = [],
    disableBreadcrumb = false,
    disableWebSite = false,
    disableOrganization = false,
    disableWebPage = false,
    disableWebSiteSearchAction = true,
    disableImageObject = false,
    ...rest
} = Astro.props;

const topicsWithArticles = await BlogService.getTopicsWithArticles();
const homepageUrl = site.domain.startsWith('http')
    ? site.domain
    : `https://${site.domain}`;
const orgId = `${homepageUrl}#organization`;
const websiteId = `${homepageUrl}#website`;
const imageId = `${homepageUrl}/blog#primaryimage`;
const breadcrumbId = `${homepageUrl}/blog#breadcrumb`;
const siteName = site?.name;

const org = site?.organization ?? {
    name: siteName,
    url: homepageUrl,
    logo: site?.logo,
};
const logoId = `${homepageUrl}#logo`;

const assets_url_base = site.assets_url_base.startsWith('http')
    ? site.assets_url_base
    : `https://${site.assets_url_base}`;

const itemLists = topicsWithArticles.map((topic: any) => ({
    '@type': 'ItemList',
    name: topic.title,
    itemListElement: topic.blog_article.map((article: any, idx: number) => ({
        '@type': 'ListItem',
        position: idx + 1,
        item: {
            '@type': 'BlogPosting',
            '@id': `${homepageUrl}/blog/${article.slug}`,
            "author": { '@type': 'Organization', 'name': `${org.name}` },
            "publisher": { '@id': `${org.url}#organization` },
            headline: article.title,
            url: `${homepageUrl}/blog/${article.slug}`,
            image: article.image || article.seo_image_url
                ? {
                    '@type': 'ImageObject',
                    url: article.image
                        ? `${assets_url_base}/${article.image.replace(/^.*\//, '')}`
                        : article.seo_image_url ? article.seo_image_url : undefined,
                    width: article.seo_image_width || 1200,   // example width
                    height: article.seo_image_height || 675,    // example height
                    caption: article.seo_image_caption || article.title // optional but can help SEO/accessibility
                  }
                : undefined,
            datePublished: article.published,
            dateModified: article.updated || article.published,
            inLanguage: 'pt-BR',
            description: article.seo_description || '',
            mainEntityOfPage: {
              '@type': 'WebPage',
              '@id': `${homepageUrl}/blog/${article.slug}`
            }
        },
    })),
}));

// WebPage block
const webPageBlock = getWebPageBlock({
    disableWebPage,
    homepageUrl,
    siteName,
    websiteId,
    orgId,
    imageId,
    breadcrumbId,
    site,
    description,
    hasPartList: itemLists,
    disableHasPart: false,
});

// BreadcrumbList
const breadcrumbBlock = getBreadcrumbBlock({
    disableBreadcrumb,
    breadcrumbId,
    breadcrumbList,
    homepageUrl,
});

const imageObjectBlock = getImageObjectBlock({
    disableImageObject,
    site,
    imageId,
    image,
    imageUrl,
    caption: imageCaption,
    width: imageWidth,
    height: imageHeight,
});

// WebSite
const webSiteBlock = !disableWebSite && getWebSiteBlock({
    disableWebSite,
    disableWebSiteSearchAction,
    websiteId,
    homepageUrl,
    siteName,
    description,
    orgId,
    site,
});

// Organization (with logo as ImageObject)
const orgBlock = getOrganizationBlock({
    disableOrganization,
    orgId,
    org,
    logoId,
    site,
});

const blocks = [
    webPageBlock,
    imageObjectBlock,
    breadcrumbBlock,
    webSiteBlock,
    orgBlock,
    // localBusinessBlock,
]
    .filter(Boolean)
    .flat();

const jsonLdGraph = {
    '@context': 'https://schema.org',
    '@graph': blocks,
};
---

<script type="application/ld+json" set:html={JSON.stringify(jsonLdGraph, null, 2)} />
