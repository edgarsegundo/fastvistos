---
import JsonLdBase from './JsonLdBase.astro';
import JsonLdReviews from './JsonLdReviews.astro';

const {
  site,
  disableWebPage = false,
  disableFAQ = false,
  disableServices = false,
  disableReviews = false,
  disableLocalBusiness = false,
  faqList = [],
  servicesList = [],
  reviewsList = [],
  imageUrl,
  logoUrl,
  ...rest
} = Astro.props;

const org = site?.organization;
const business = site?.business;
const homepageUrl = site?.url;
const siteName = site?.name;
const description = site?.description;
const resolvedImageUrl = imageUrl ?? site?.image;
const resolvedLogoUrl = logoUrl ?? site?.logo;

// FAQ block
type Faq = { question: string; answer: string };
type Service = { name: string; description: string; offers?: any };

const faqBlock = (faqList as Faq[]).length > 0 ? {
  '@type': 'FAQPage',
  'mainEntity': (faqList as Faq[]).map((faq: Faq) => ({
    '@type': 'Question',
    'name': faq.question,
    'acceptedAnswer': {
      '@type': 'Answer',
      'text': faq.answer
    }
  }))
} : null;

// Services block
const servicesBlock = Array.isArray(servicesList) && servicesList.length > 0
  ? servicesList.map((service: any) =>
      service.schema
        ? service.schema
        : {
            '@type': 'Service',
            'name': service.name,
            'description': service.description,
            ...(service.offers ? { offers: service.offers } : {})
          }
    )
  : null;

// WebPage block
const webPageBlock = {
  '@type': 'WebPage',
  'url': homepageUrl,
  'name': siteName,
  'description': description,
  ...(resolvedImageUrl ? { image: resolvedImageUrl } : {}),
  ...(resolvedLogoUrl ? { logo: resolvedLogoUrl } : {})
};

// Organization block
const orgBlock = org ? {
  '@type': 'Organization',
  'name': org.name,
  ...(org.url ? { url: org.url } : {}),
  ...(org.logo ? { logo: org.logo } : {}),
  ...(org.sameAs ? { sameAs: org.sameAs } : {})
} : null;

// LocalBusiness block
const businessBlock = business ? {
  '@type': 'LocalBusiness',
  ...business
} : null;

const blocks = [
  !disableWebPage && webPageBlock,
  orgBlock,
  !disableLocalBusiness && businessBlock,
  !disableFAQ && faqBlock,
  !disableServices && servicesBlock,
].filter(Boolean).flat();

const jsonLdGraph = {
  '@context': 'https://schema.org',
  '@graph': blocks
};
---

<JsonLdBase siteConfig={site} customData={jsonLdGraph} />

{!disableReviews && (
  <JsonLdReviews reviews={reviewsList} />
)}
