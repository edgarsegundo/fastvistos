---
// JsonLdReview.astro - Structured data for Review/AggregateRating schema
export interface Props {
    itemReviewed: {
        name: string;
        type?: string;
    };
    aggregateRating?: {
        ratingValue: number;
        reviewCount: number;
        bestRating?: number;
        worstRating?: number;
    };
    reviews?: Array<{
        author: string;
        datePublished: string;
        reviewBody: string;
        ratingValue: number;
    }>;
}

const { itemReviewed, aggregateRating, reviews = [] } = Astro.props;

const schema = {
    '@context': 'https://schema.org',
    '@type': itemReviewed.type || 'Organization',
    name: itemReviewed.name,
    ...(aggregateRating && {
        aggregateRating: {
            '@type': 'AggregateRating',
            ratingValue: aggregateRating.ratingValue,
            reviewCount: aggregateRating.reviewCount,
            bestRating: aggregateRating.bestRating || 5,
            worstRating: aggregateRating.worstRating || 1,
        },
    }),
    ...(reviews.length > 0 && {
        review: reviews.map(review => ({
            '@type': 'Review',
            author: {
                '@type': 'Person',
                name: review.author,
            },
            datePublished: review.datePublished,
            reviewBody: review.reviewBody,
            reviewRating: {
                '@type': 'Rating',
                ratingValue: review.ratingValue,
                bestRating: 5,
                worstRating: 1,
            },
        })),
    }),
};
---

<script type="application/ld+json" set:html={JSON.stringify(schema)} />
