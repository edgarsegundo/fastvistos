---
/**
 * ðŸš¨ AUTO-GENERATED FILE. DO NOT EDIT.
 * This file is generated by sync-blog.js and will be overwritten.
 * To customize, edit the template.
 */

// Open Graph meta tags component with all supported types
export interface Props {
    title?: string;
    description?: string;
    url?: string;
    image?: string;
    imageWidth?: number | string; // Open Graph image width (optional)
    imageHeight?: number | string; // Open Graph image height (optional)
    imageType?: string; // Open Graph image MIME type (optional)
    imageAlt?: string; // Open Graph image alt text (optional)
    siteName?: string;
    type?:
        | 'website'
        | 'article'
        | 'book'
        | 'profile'
        | 'music.song'
        | 'music.album'
        | 'music.playlist'
        | 'music.radio_station'
        | 'video.movie'
        | 'video.episode'
        | 'video.tv_show'
        | 'video.other'
        | 'business.business'
        | 'place'
        | 'restaurant.menu'
        | 'restaurant.menu_item'
        | 'restaurant.menu_section'
        | 'restaurant.restaurant'
        | 'product'
        | 'product.group'
        | 'product.item'
        | 'game.achievement'
        | 'fitness.course';
    locale?: string;
    // Additional props for specific types
    author?: string; // For articles
    publishedTime?: string; // For articles
    modifiedTime?: string; // For articles
    section?: string; // For articles
    tags?: string[]; // For articles
}

const {
    title,
    description,
    url,
    image,
    imageWidth,
    imageHeight,
    imageType,
    imageAlt,
    siteName,
    type = 'website',
    locale = 'pt-BR',
    author,
    publishedTime,
    modifiedTime,
    section,
    tags,
} = Astro.props;
---

<meta property="og:type" content={type} />
{url && <meta property="og:url" content={url} />}
{title && <meta property="og:title" content={title} />}
{description && <meta property="og:description" content={description} />}

{
    Array.isArray(image) ? (
        image.map((img, idx) => (
            <>
                <meta property="og:image" content={img.url || img} />
                {img.secureUrl && <meta property="og:image:secure_url" content={img.secureUrl} />}
                {img.type && <meta property="og:image:type" content={img.type} />}
                {img.width && <meta property="og:image:width" content={`${img.width}`} />}
                {img.height && <meta property="og:image:height" content={`${img.height}`} />}
                {img.alt && <meta property="og:image:alt" content={img.alt} />}
            </>
        ))
    ) : (
        <>
            {image && <meta property="og:image" content={image} />}
            {/* {imageSecureUrl && <meta property="og:image:secure_url" content={imageSecureUrl} />} */}
            {imageType && <meta property="og:image:type" content={imageType} />}
            {imageWidth && <meta property="og:image:width" content={`${imageWidth}`} />}
            {imageHeight && <meta property="og:image:height" content={`${imageHeight}`} />}
            {imageAlt && <meta property="og:image:alt" content={imageAlt} />}
        </>
    )
}

{siteName && <meta property="og:site_name" content={siteName} />}
<meta property="og:locale" content={locale} />

{type === 'article' && author && <meta property="article:author" content={author} />}
{
    type === 'article' && publishedTime && (
        <meta property="article:published_time" content={publishedTime} />
    )
}
{
    type === 'article' && modifiedTime && (
        <meta property="article:modified_time" content={modifiedTime} />
    )
}
{type === 'article' && section && <meta property="article:section" content={section} />}
{type === 'article' && tags && tags.map((tag) => <meta property="article:tag" content={tag} />)}
