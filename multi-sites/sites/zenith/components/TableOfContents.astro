---
/**
 * ðŸš¨ AUTO-GENERATED FILE. DO NOT EDIT.
 * This file is generated by sync-blog.js and will be overwritten.
 * To customize, edit the template.
 */

interface Props {
    headings: Array<{
        slug: string;
        text: string;
        depth: number;
    }>;
}

const { headings } = Astro.props;

// Filter only H2 headings (depth 2)
const h2Headings = headings.filter((heading) => heading.depth === 2);
---

{
    h2Headings.length > 0 && (
        <aside class="table-of-contents">
            <div class="toc-header">
                <h3>ConteÃºdo</h3>
            </div>
            <nav class="toc-nav">
                <ul class="toc-list">
                    {h2Headings.map((heading) => (
                        <li class="toc-item">
                            <a href={`#${heading.slug}`} class="toc-link">
                                {heading.text}
                            </a>
                        </li>
                    ))}
                </ul>
            </nav>
        </aside>
    )
}

<style>
    .table-of-contents {
        position: sticky;
        top: 2rem;
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 0.75rem;
        padding: 1.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        height: fit-content;
        max-height: calc(100vh - 4rem);
        overflow-y: auto;
    }

    .toc-header {
        margin-bottom: 1rem;
        padding-bottom: 0.75rem;
        border-bottom: 2px solid #f97316;
    }

    .toc-header h3 {
        font-size: 1.125rem;
        font-weight: 600;
        color: #374151;
        margin: 0;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .toc-nav {
        margin: 0;
    }

    .toc-list {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .toc-item {
        margin: 0;
        padding: 0;
    }

    .toc-link {
        display: block;
        padding: 0.75rem 0;
        color: #6b7280;
        text-decoration: none;
        font-size: 0.95rem;
        line-height: 1.4;
        border-bottom: 1px solid transparent;
        transition: all 0.2s ease-in-out;
        position: relative;
        padding-left: 1rem;
    }

    .toc-link::before {
        content: 'â–ª';
        color: #f97316;
        position: absolute;
        left: 0;
        font-weight: bold;
        opacity: 0.7;
    }

    .toc-link:hover {
        color: #f97316;
        background-color: rgba(249, 115, 22, 0.05);
        border-radius: 0.375rem;
        padding-left: 1.25rem;
    }

    .toc-link:hover::before {
        opacity: 1;
        color: #ea580c;
    }

    /* Active state for current section */
    .toc-link.active {
        color: #f97316;
        font-weight: 600;
        background-color: rgba(249, 115, 22, 0.1);
        border-radius: 0.375rem;
    }

    .toc-link.active::before {
        opacity: 1;
        color: #ea580c;
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
        .table-of-contents {
            position: static;
            margin-bottom: 2rem;
            max-height: none;
        }
    }

    @media (max-width: 768px) {
        .table-of-contents {
            margin: 0 -1rem 2rem -1rem;
            border-radius: 0;
            border-left: none;
            border-right: none;
        }

        .toc-header h3 {
            font-size: 1rem;
        }

        .toc-link {
            font-size: 0.9rem;
            padding: 0.625rem 0;
        }
    }
</style>

<script>
    // Add active state based on scroll position
    document.addEventListener('DOMContentLoaded', function () {
        const tocLinks = document.querySelectorAll('.toc-link');
        const headings = document.querySelectorAll('.blog-content h2[id]');

        if (!tocLinks.length || !headings.length) return;

        function updateActiveLink() {
            let current = '';

            headings.forEach((heading) => {
                const rect = heading.getBoundingClientRect();
                if (rect.top <= 100) {
                    current = heading.id;
                }
            });

            tocLinks.forEach((link) => {
                link.classList.remove('active');
                if (link.getAttribute('href') === `#${current}`) {
                    link.classList.add('active');
                }
            });
        }

        // Update on scroll
        window.addEventListener('scroll', updateActiveLink);

        // Update on page load
        updateActiveLink();

        // Smooth scroll behavior for TOC links
        tocLinks.forEach((link) => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = link.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);

                if (targetElement) {
                    targetElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start',
                    });
                }
            });
        });
    });
</script>
