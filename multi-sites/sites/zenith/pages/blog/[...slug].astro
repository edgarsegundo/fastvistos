---
/**
 * ðŸš¨ AUTO-GENERATED FILE. DO NOT EDIT.
 * This file is generated by sync-blog.js and will be overwritten.
 * To customize, edit the template.
 */

import { getCollection } from 'astro:content';
import SharedBlogLayout from '../../layouts/SharedBlogLayout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import SidebarAbove from '../../components/SidebarAbove.astro';
import SidebarBelow from '../../components/SidebarBelow.astro';

import { siteConfig } from '../../site-config.ts';
import { BlogService } from '../../lib/blog-service.ts';
import { estimateReadingTime, getValidatedImageUrl } from '../../lib/utils.ts';
import JsonLdBlogPost from '../../components/JsonLdBlogPost.astro';
import '../../styles/markdown-blog.css';
import { ensureTrailingSlash } from '../../lib/utils.ts';

// Generate static paths from the markdown files in content/blog/
export async function getStaticPaths() {
    const blogEntries = await getCollection('blog');

    return blogEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry },
    }));
}

// Get the markdown entry from props
const { entry } = Astro.props;

// Render the markdown content
const { Content, headings } = await entry.render();
const articleFromDb = await BlogService.getArticleBySlugFromDb(entry.slug);
const blogConfigFromDb = await BlogService.getBlogConfigFromDb();
const canonical = siteConfig.site.canonical ? new URL(ensureTrailingSlash(siteConfig.site.canonical) + 'blog/' + entry.slug).toString() : undefined;

// Get author information
const authorName = articleFromDb?.author_name || blogConfigFromDb?.author_name;
const authorImage = articleFromDb?.author_image || blogConfigFromDb?.author_image;
const authorDescription = blogConfigFromDb?.author_description;

// Get FAQ information
const faqJson = articleFromDb?.faq_json;
let faqData = null;

if (faqJson) {
    try {
        faqData = typeof faqJson === 'string' ? JSON.parse(faqJson) : faqJson;
    } catch (e) {
        console.error('Error parsing FAQ JSON:', e);
    }
}

const authorImageUrl = authorImage ? '/assets/images/blog/' + authorImage.replace(/^.*\//, '') : null;
---

<SharedBlogLayout
    canonicalConf={canonical}
    faviconPathFromConf={siteConfig.site.faviconPath}
    seoFromConf={siteConfig.blogPostConfig.seo}

    titleFromDb={articleFromDb?.title}
    descriptionFromDb={articleFromDb?.seo_description}
    authorNameFromDb={articleFromDb?.author_name}
    imageFromDb={articleFromDb?.image}
    imageUrlFromDb={articleFromDb?.seo_image_url}
    imageCaptionFromDb={articleFromDb?.seo_image_caption}
    imageWidthFromDb={articleFromDb?.seo_image_width}
    imageHeightFromDb={articleFromDb?.seo_image_height}

    pubDate={articleFromDb?.published ? new Date(articleFromDb.published).toISOString() : undefined}
    updatedDate={articleFromDb?.modified ? new Date(articleFromDb.modified).toISOString() : undefined}
>
    
    <Fragment slot="head">
        <JsonLdBlogPost
            articleConfigFromDb={articleFromDb}
            blogConfigFromDb={blogConfigFromDb}
            pubDate={entry.data.pubDate}
            updatedDate={entry.data.updatedDate}
            wordCount={entry.data.wordCount}
        />
    </Fragment>

    <div class="blog-layout-container">
        
        <article class="blog-article">
            <header class="article-header">
                <h1 class="article-title">{entry.data.title}</h1>

                <div class="article-meta">
                    <time datetime={entry.data.pubDate}>
                        {
                            new Date(entry.data.pubDate).toLocaleDateString('pt-BR', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                            })
                        }
                    </time>
                    {entry.data.topic && <span class="article-topic">{entry.data.topic}</span>}
                </div>

                {
                    entry.data.image && entry.data.image !== '/assets/images/blog/' && (
                        <div class="article-image-wrapper">
                            <img
                                src={entry.data.image}
                                alt={entry.data.title}
                                class="article-image"
                            />
                        </div>
                    )
                }
                <span class="article-reading-time">
                    Leitura: â‰ˆ{estimateReadingTime(Number(entry.data.wordCount))} min
                </span>
            </header>

            
            <div class="blog-content">
                <Content />
            </div>

            
            {faqData && Array.isArray(faqData) && faqData.length > 0 && (
                <div class="faq-section">
                    <div class="faq-divider"></div>
                    <div class="faq-card">
                        <h2 class="faq-title">Perguntas Frequentes</h2>
                        <div class="faq-list">
                            {faqData.map((item, index) => (
                                <div class="faq-item" key={index}>
                                    <button 
                                        class="faq-question" 
                                        onclick={`toggleFaq(${index})`}
                                        aria-expanded="false"
                                        aria-controls={`faq-answer-${index}`}
                                    >
                                        <span class="faq-question-text">{item.question}</span>
                                        <svg class="faq-chevron" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                        </svg>
                                    </button>
                                    <div 
                                        class="faq-answer" 
                                        id={`faq-answer-${index}`}
                                        style="display: none;"
                                    >
                                        <p>{item.answer}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            )}

            
            {authorName && (
                <div class="author-section">
                    <div class="author-divider"></div>
                    <div class="author-card">
                        {authorImageUrl && (
                            <div class="author-image">
                                <img src={authorImageUrl} alt={authorName} />
                            </div>
                        )}
                        <div class="author-content">
                            <div class="author-info">
                                <span class="author-label">Escrito por</span>
                                <h3 class="author-name">{authorName}</h3>
                            </div>
                            {authorDescription && (
                                <p class="author-description">{authorDescription}</p>
                            )}
                        </div>
                    </div>
                </div>
            )}
        </article>

        
        <aside class="sidebar-container">
            
            <SidebarAbove />

            
            <div class="toc-responsive">
                <TableOfContents headings={headings} />
            </div>

            
            <SidebarBelow />
        </aside>
    </div>
</SharedBlogLayout>

<style>
    .blog-layout-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 3rem;
        align-items: start;
    }

    .blog-article {
        min-width: 0; /* Prevents grid overflow */
    }

    .sidebar-container {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .article-image-wrapper {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 0.5rem 0 1.5rem;
    }

    /* FAQ Section Styles */
    .faq-section {
        margin-top: 4rem;
        margin-bottom: 2rem;
        padding-left: 2rem;
        padding-right: 2rem;
    }

    .faq-divider {
        height: 1px;
        background: linear-gradient(to right, transparent, #e5e7eb, transparent);
        margin-bottom: 2rem;
    }

    .faq-card {
        background: #f8fafc;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
        padding: 2rem;
    }

    .faq-title {
        font-size: 1.875rem;
        font-weight: 700;
        color: #1e293b;
        margin: 0 0 1.5rem 0;
        text-align: center;
    }

    .faq-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .faq-item {
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        background: white;
        overflow: hidden;
        transition: all 0.2s ease;
    }

    .faq-item:hover {
        border-color: #cbd5e1;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .faq-question {
        width: 100%;
        padding: 1rem 1.25rem;
        text-align: left;
        background: none;
        border: none;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 1rem;
        font-weight: 600;
        color: #374151;
        transition: background-color 0.2s ease;
    }

    .faq-question:hover {
        background-color: #f9fafb;
    }

    .faq-question-text {
        flex: 1;
        margin-right: 1rem;
    }

    .faq-chevron {
        width: 20px;
        height: 20px;
        color: #6b7280;
        transition: transform 0.2s ease;
        flex-shrink: 0;
    }

    .faq-question[aria-expanded="true"] .faq-chevron {
        transform: rotate(180deg);
    }

    .faq-answer {
        padding: 0 1.25rem 1rem 1.25rem;
        border-top: 1px solid #f3f4f6;
    }

    .faq-answer p {
        margin: 0.75rem 0 0 0;
        color: #4b5563;
        line-height: 1.6;
    }

    /* Author Section Styles */
    .author-section {
        margin-top: 4rem;
        margin-bottom: 2rem;
        padding-left: 2rem;
        padding-right: 2rem;
    }

    .author-divider {
        height: 1px;
        background: linear-gradient(to right, transparent, #e5e7eb, transparent);
        margin-bottom: 2rem;
    }

    .author-card {
        display: flex;
        gap: 1.5rem;
        align-items: flex-start;
        padding: 2rem;
        background: #f8fafc;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
    }

    .author-image {
        flex-shrink: 0;
    }

    .author-image img {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #fff;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .author-content {
        flex: 1;
        min-width: 0;
    }

    .author-info {
        margin-bottom: 0.75rem;
    }

    .author-label {
        display: block;
        font-size: 0.875rem;
        color: #64748b;
        font-weight: 500;
        margin-bottom: 0.25rem;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }

    .author-name {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1e293b;
        margin: 0;
        line-height: 1.2;
    }

    .author-description {
        color: #475569;
        line-height: 1.6;
        margin: 0;
        font-size: 1rem;
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
        .blog-layout-container {
            grid-template-columns: 1fr;
            gap: 2rem;
            padding: 1.5rem;
        }
        .toc-responsive {
            display: none;
        }
    }

    @media (max-width: 768px) {
        .blog-layout-container {
            padding: 1rem;
            gap: 1.5rem;
        }
        .article-image-wrapper {
            margin: 2rem 0;
        }
        .toc-responsive {
            display: none;
        }
        
        /* FAQ section mobile styles */
        .faq-section {
            padding-left: 1rem;
            padding-right: 1rem;
        }
        
        .faq-card {
            padding: 1.5rem;
        }
        
        .faq-title {
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }
        
        .faq-question {
            padding: 0.875rem 1rem;
            font-size: 0.9rem;
        }
        
        .faq-answer {
            padding: 0 1rem 0.875rem 1rem;
        }

        /* Author section mobile styles */
        .author-section {
            padding-left: 1rem;
            padding-right: 1rem;
        }
        
        .author-card {
            flex-direction: column;
            text-align: center;
            gap: 1rem;
            padding: 1.5rem;
        }
        
        .author-image img {
            width: 60px;
            height: 60px;
        }
        
        .author-name {
            font-size: 1.25rem;
        }
        
        .author-description {
            font-size: 0.875rem;
        }
    }
</style>

<script>
    function toggleFaq(index) {
        const button = document.querySelector(`button[onclick="toggleFaq(${index})"]`);
        const answer = document.getElementById(`faq-answer-${index}`);
        
        if (!button || !answer) return;
        
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        // Close all other FAQ items
        document.querySelectorAll('.faq-question').forEach((btn, idx) => {
            if (idx !== index) {
                btn.setAttribute('aria-expanded', 'false');
                const otherAnswer = document.getElementById(`faq-answer-${idx}`);
                if (otherAnswer) {
                    otherAnswer.style.display = 'none';
                }
            }
        });
        
        // Toggle current item
        if (isExpanded) {
            button.setAttribute('aria-expanded', 'false');
            answer.style.display = 'none';
        } else {
            button.setAttribute('aria-expanded', 'true');
            answer.style.display = 'block';
        }
    }
    
    // Make function globally available
    (window as any).toggleFaq = toggleFaq;
</script>
