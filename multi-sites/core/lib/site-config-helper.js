/**
 * ðŸš¨ AUTO-GENERATED FILE. DO NOT EDIT.
 * This file is generated by sync-blog.js and will be overwritten.
 * To customize, edit the template.
 */
// Helper functions for the new nested siteConfig structure
export class SiteConfigHelper {
    /**
     * Dynamically load site config for Astro components
     * Uses SITE_ID environment variable or falls back to fastvistos
     */
    static async loadSiteConfig() {
        const siteId = import.meta.env.SITE_ID || 'fastvistos';
        try {
            const module = await import(`../../sites/${siteId}/site-config.ts`);
            return module.siteConfig;
        }
        catch (error) {
            console.warn(`Could not load site config for ${siteId}, falling back to fastvistos`);
            const fallback = await import(`../../sites/fastvistos/site-config.ts`);
            return fallback.siteConfig;
        }
    }
    static getMetadata(config, pageTitle, pageDescription) {
        // Support both flat and nested config structures
        const seo = config.seo ||
            config.homePageConfig?.seo ||
            config.blogPageConfig?.seo ||
            {};
        const business = config.business || config;
        return {
            title: pageTitle ? `${pageTitle} | ${business.name ?? ''}` : seo.title,
            description: pageDescription || seo.description,
            keywords: Array.isArray(seo.keywords) ? seo.keywords.join(', ') : '',
            ogImage: seo.ogImage,
            siteName: business.name ?? '',
            domain: business.domain ?? '',
            language: business.language ?? '',
        };
    }
    static getCssVariables(config) {
        const branding = config.branding || {};
        return {
            '--primary-color': branding.primaryColor,
            '--secondary-color': branding.secondaryColor,
            ...((config.customStyles && config.customStyles.cssVars) || {}),
        };
    }
    static hasFeature(config, feature) {
        return !!(config.features && config.features[feature]);
    }
    static getContactInfo(config) {
        return {
            email: config.contact?.email,
            whatsapp: config.contact?.whatsapp,
            socialMedia: config.socialMedia,
        };
    }
    static getWhatsAppLink(config, message) {
        const whatsapp = config.contact?.whatsapp || '';
        const encodedMessage = message ? encodeURIComponent(message) : '';
        return `https://wa.me/${whatsapp.replace(/\D/g, '')}${encodedMessage ? `?text=${encodedMessage}` : ''}`;
    }
}
