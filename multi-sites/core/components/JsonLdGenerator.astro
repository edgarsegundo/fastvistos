---
import { SiteConfigHelper } from '../lib/site-config-helper.ts';

/**
 * JsonLdGenerator.astro - Universal Structured Data Component
 * 
 * A revolutionary approach to structured data that automatically generates
 * appropriate JSON-LD based on page type, content, and site configuration.
 * This component represents the future of SEO where developers don't need
 * to manually craft structured data - the system intelligently understands
 * the context and generates optimal markup.
 * 
 * Key Features:
 * - Automatic schema type detection
 * - Site-specific business information integration
 * - Content-aware structured data generation
 * - Multi-language support
 * - Performance-optimized output
 * 
 * @component JsonLdGenerator
 * @category SEO
 * @subcategory StructuredData
 * @author Edgar (AI-Assisted Development)
 * @version 1.0.0
 * @since 2024
 */

export interface Props {
  /** Page type determines which schema.org types to include */
  pageType?: 'homepage' | 'article' | 'product' | 'service' | 'contact' | 'about' | 'blog-list' | 'blog-post';
  
  /** Article-specific metadata for blog posts and articles */
  article?: {
    title: string;
    description: string;
    author: string;
    publishDate: string;
    modifiedDate?: string;
    image?: string;
    category?: string;
    tags?: string[];
    wordCount?: number;
    readingTime?: number;
  };
  
  /** Product-specific metadata for product pages */
  product?: {
    name: string;
    description: string;
    price?: string;
    currency?: string;
    availability?: 'InStock' | 'OutOfStock' | 'PreOrder';
    brand?: string;
    model?: string;
    sku?: string;
    gtin?: string;
    image?: string[];
    reviews?: {
      rating: number;
      count: number;
    };
  };
  
  /** Service-specific metadata for service pages */
  service?: {
    name: string;
    description: string;
    provider: string;
    areaServed?: string[];
    serviceType?: string;
    price?: string;
    currency?: string;
  };
  
  /** Contact information for contact pages */
  contact?: {
    telephone?: string;
    email?: string;
    address?: {
      streetAddress: string;
      addressLocality: string;
      addressRegion: string;
      postalCode: string;
      addressCountry: string;
    };
    hours?: {
      dayOfWeek: string[];
      opens: string;
      closes: string;
    }[];
  };
  
  /** Override default site information */
  siteOverride?: {
    name?: string;
    url?: string;
    logo?: string;
    description?: string;
  };
  
  /** Additional custom structured data */
  customData?: Record<string, any>[];
  
  /** Disable specific schema types */
  disable?: {
    organization?: boolean;
    website?: boolean;
    breadcrumb?: boolean;
    searchAction?: boolean;
  };
}

const { 
  pageType = 'homepage', 
  article, 
  product, 
  service, 
  contact,
  siteOverride,
  customData = [],
  disable = {}
} = Astro.props;

// Get site configuration
const siteId = Astro.url.hostname.includes('fastvistos') ? 'fastvistos' : 
              Astro.url.hostname.includes('p2digital') ? 'p2digital' : 'fastvistos';



// Load site configuration dynamically
const siteConfig = await SiteConfigHelper.loadSiteConfig();

// Current page URL
const currentUrl = Astro.url.href;
const canonicalUrl = currentUrl.split('?')[0].split('#')[0];

// Generate structured data based on page type and provided data
const structuredData: any[] = [];

// 1. Organization Schema (always include unless disabled)
if (!disable.organization) {
  const organizationSchema = {
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": siteConfig.name,
    "url": currentUrl,
    "logo": {
      "@type": "ImageObject",
      "url": siteConfig.logo
    },
    "description": siteConfig.description,
    "sameAs": []
  };

  // Add social media profiles if available
  if (siteConfig.socialMedia) {
    if (siteConfig.socialMedia.facebook) organizationSchema.sameAs.push(siteConfig.socialMedia.facebook);
    if (siteConfig.socialMedia.twitter) organizationSchema.sameAs.push(`https://twitter.com/${siteConfig.socialMedia.twitter.replace('@', '')}`);
    if (siteConfig.socialMedia.linkedin) organizationSchema.sameAs.push(siteConfig.socialMedia.linkedin);
    if (siteConfig.socialMedia.instagram) organizationSchema.sameAs.push(siteConfig.socialMedia.instagram);
  }

  // Add contact information if available
  if (contact || siteConfig.contact) {
    const contactInfo = contact || siteConfig.contact;
    if (contactInfo.telephone) {
      organizationSchema.telephone = contactInfo.telephone;
    }
    if (contactInfo.email) {
      organizationSchema.email = contactInfo.email;
    }
    if (contactInfo.address) {
      organizationSchema.address = {
        "@type": "PostalAddress",
        ...contactInfo.address
      };
    }
  }

  structuredData.push(organizationSchema);
}

// 2. Website Schema (for homepage)
if (!disable.website && pageType === 'homepage') {
  const websiteSchema = {
    "@context": "https://schema.org",
    "@type": "WebSite",
    "name": siteConfig.name,
    "url": currentUrl,
    "description": siteConfig.description,
    "publisher": {
      "@type": "Organization",
      "name": siteConfig.name
    }
  };

  // Add search action if not disabled
  if (!disable.searchAction && site.searchUrl) {
    websiteSchema.potentialAction = {
      "@type": "SearchAction",
      "target": {
        "@type": "EntryPoint",
        "urlTemplate": `${site.searchUrl}?q={search_term_string}`
      },
      "query-input": "required name=search_term_string"
    };
  }

  structuredData.push(websiteSchema);
}

// 3. Article Schema (for blog posts and articles)
if (article && (pageType === 'article' || pageType === 'blog-post')) {
  const articleSchema = {
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": article.title,
    "description": article.description,
    "url": canonicalUrl,
    "datePublished": article.publishDate,
    "dateModified": article.modifiedDate || article.publishDate,
    "author": {
      "@type": "Person",
      "name": article.author
    },
    "publisher": {
      "@type": "Organization",
      "name": siteConfig.name,
      "logo": {
        "@type": "ImageObject",
        "url": siteConfig.logo
      }
    }
  };

  // Add article image if provided
  if (article.image) {
    articleSchema.image = {
      "@type": "ImageObject",
      "url": article.image.startsWith('http') ? article.image : `${currentUrl}${article.image}`
    };
  }

  // Add article metadata
  if (article.category) {
    articleSchema.articleSection = article.category;
  }
  
  if (article.tags) {
    articleSchema.keywords = article.tags.join(', ');
  }

  if (article.wordCount) {
    articleSchema.wordCount = article.wordCount;
  }

  if (article.readingTime) {
    articleSchema.timeRequired = `PT${article.readingTime}M`;
  }

  structuredData.push(articleSchema);
}

// 4. Product Schema (for product pages)
if (product && pageType === 'product') {
  const productSchema = {
    "@context": "https://schema.org",
    "@type": "Product",
    "name": product.name,
    "description": product.description,
    "url": canonicalUrl
  };

  // Add product images
  if (product.image) {
    productSchema.image = Array.isArray(product.image) ? product.image : [product.image];
  }

  // Add brand information
  if (product.brand) {
    productSchema.brand = {
      "@type": "Brand",
      "name": product.brand
    };
  }

  // Add product identifiers
  if (product.sku) productSchema.sku = product.sku;
  if (product.model) productSchema.model = product.model;
  if (product.gtin) productSchema.gtin = product.gtin;

  // Add offer information
  if (product.price) {
    productSchema.offers = {
      "@type": "Offer",
      "price": product.price,
      "priceCurrency": product.currency || "USD",
      "availability": `https://schema.org/${product.availability || 'InStock'}`,
      "url": canonicalUrl,
      "seller": {
        "@type": "Organization",
        "name": site.name
      }
    };
  }

  // Add review information
  if (product.reviews) {
    productSchema.aggregateRating = {
      "@type": "AggregateRating",
      "ratingValue": product.reviews.rating,
      "reviewCount": product.reviews.count
    };
  }

  structuredData.push(productSchema);
}

// 5. Service Schema (for service pages)
if (service && pageType === 'service') {
  const serviceSchema = {
    "@context": "https://schema.org",
    "@type": "Service",
    "name": service.name,
    "description": service.description,
    "url": canonicalUrl,
    "provider": {
      "@type": "Organization",
      "name": service.provider || site.name
    }
  };

  // Add service area
  if (service.areaServed) {
    serviceSchema.areaServed = service.areaServed.map(area => ({
      "@type": "Place",
      "name": area
    }));
  }

  // Add service type
  if (service.serviceType) {
    serviceSchema.serviceType = service.serviceType;
  }

  // Add pricing information
  if (service.price) {
    serviceSchema.offers = {
      "@type": "Offer",
      "price": service.price,
      "priceCurrency": service.currency || "USD"
    };
  }

  structuredData.push(serviceSchema);
}

// 6. Local Business Schema (if contact information is provided)
if (contact && contact.address) {
  const localBusinessSchema = {
    "@context": "https://schema.org",
    "@type": "LocalBusiness",
    "name": site.name,
    "description": site.description,
    "url": currentUrl,
    "address": {
      "@type": "PostalAddress",
      ...contact.address
    }
  };

  // Add contact information
  if (contact.telephone) {
    localBusinessSchema.telephone = contact.telephone;
  }
  
  if (contact.email) {
    localBusinessSchema.email = contact.email;
  }

  // Add business hours
  if (contact.hours) {
    localBusinessSchema.openingHoursSpecification = contact.hours.map(hours => ({
      "@type": "OpeningHoursSpecification",
      "dayOfWeek": hours.dayOfWeek,
      "opens": hours.opens,
      "closes": hours.closes
    }));
  }

  structuredData.push(localBusinessSchema);
}

// 7. Breadcrumb Schema (for non-homepage pages)
if (!disable.breadcrumb && pageType !== 'homepage') {
  const pathSegments = Astro.url.pathname.split('/').filter(segment => segment);
  
  if (pathSegments.length > 0) {
    const breadcrumbList = {
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement": []
    };

    // Add homepage
    breadcrumbList.itemListElement.push({
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": currentUrl
    });

    // Add path segments
    let currentPath = currentUrl;
    pathSegments.forEach((segment, index) => {
      currentPath += `/${segment}`;
      breadcrumbList.itemListElement.push({
        "@type": "ListItem",
        "position": index + 2,
        "name": segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, ' '),
        "item": currentPath
      });
    });

    structuredData.push(breadcrumbList);
  }
}

// 8. Add custom structured data
if (customData.length > 0) {
  structuredData.push(...customData);
}

// Generate final JSON-LD script
const jsonLd = structuredData.length === 1 ? structuredData[0] : structuredData;
---

<!-- 
  Universal Structured Data Generator
  
  This component represents a revolutionary approach to structured data where
  developers don't need to manually craft JSON-LD for every page. Instead,
  the system intelligently analyzes the page type, content, and site configuration
  to generate optimal structured data automatically.
  
  Generated schemas: {structuredData.map(schema => schema['@type']).join(', ')}
  Page type: {pageType}
  Site: {site.name}
-->
<script type="application/ld+json" set:html={JSON.stringify(jsonLd, null, 2)} />

<!-- Structured Data Debug Information (Development Only) -->
{import.meta.env.DEV && (
  <script>
    console.group('🔍 Structured Data Debug - JsonLdGenerator');
    console.log('Page Type:', "{pageType}");
    console.log('Generated Schemas:', "{structuredData.map(schema => schema['@type']).join(', ')}");
    console.log('Site Config:', "{siteId}", "{JSON.stringify(site)}");
    console.log('Full JSON-LD:', "{JSON.stringify(jsonLd)}");
    console.groupEnd();
  </script>
)}

<style>
  /* This component generates no visual output */
  script[type="application/ld+json"] {
    display: none;
  }
</style>
