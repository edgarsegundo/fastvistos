---
/**
 * JsonLdBlogIndex.astro
 * Dynamically generates JSON-LD for the blog index page using live data from BlogService.
 * - Uses siteConfig for domain and organization info
 * - Uses BlogService.getTopicsWithArticles() for topics and articles
 * - Outputs a <script type="application/ld+json"> in the head
 *
 * This component is generic and will be copied to each site's components/ folder.
 */
import { getWebSiteBlock } from './JsonLdWebSiteBlock.astro';
import { getWebPageBlock } from './JsonLdWebPageBlock.astro';
import { getBreadcrumbBlock } from './JsonLdBreadcrumbBlock.astro';
import { getImageObjectBlock } from './JsonLdImageObjectBlock.astro';
import { BlogService } from '../lib/blog-service.ts';
import { ensureTrailingSlash } from '../lib/utils.ts';
import { siteConfig } from '../../site-config.ts';

const {
    title,
    description,
    image,
    imageUrl,
    imageCaption,
    imageHeight,
    imageWidth,
    breadcrumbList = [],
    disableBreadcrumb = false,
    disableWebSite = false,
    disableOrganization = false,
    disableWebPage = false,
    disableWebSiteSearchAction = true,
    disableImageObject = false,
    ...rest
} = Astro.props;

const topicsWithArticles = await BlogService.getTopicsWithArticles();


const canonicalValidated = ensureTrailingSlash(siteConfig.site.canonical);
const blogpageUrl = `${canonicalValidated}blog/`;

const websiteId = `${canonicalValidated}#website`;
const orgId = `${canonicalValidated}#organization`;
const breadcrumbId = `${blogpageUrl}#breadcrumb`;
const logoId = `${canonicalValidated}#logo`;

const orgEntity = {
  '@type': 'Organization',
  '@id': `${canonicalValidated}#organization`,
  name: siteConfig.site.siteName,
  logo: {
    '@type': 'ImageObject',
    url: siteConfig?.logo?.url,
    width: siteConfig?.logo?.width,
    height: siteConfig?.logo?.height,
  }
};

const itemLists = topicsWithArticles.map((topic: any) => ({
    '@type': 'ItemList',
    name: topic.title,
    itemListElement: topic.blog_article.map((article: any, idx: number) => ({
        '@type': 'ListItem',
        position: idx + 1,
        item: {
            '@type': 'BlogPosting',
            '@id': `${blogpageUrl}${article.slug}`,
            url: `${blogpageUrl}${article.slug}`,
            headline: article.title,
            description: article.seo_description || '',
            datePublished: article.published,
            dateModified: article.updated || article.published,
            author: orgEntity,                    // can also be Person if needed
            publisher: orgEntity,
            inLanguage: siteConfig.site?.locale || 'pt_BR',
            mainEntityOfPage: {
                '@type': 'WebPage',
                '@id': `${blogpageUrl}${article.slug}`,
            },
            image: getImageObjectBlock({
                    disableImageObject: false,
                    imageId: `${blogpageUrl}${article.slug}#image`,
                    image: article.image,
                    imageUrl: article.seo_image_url,
                    caption: article.seo_image_caption,
                    width: article.seo_image_width,
                    height: article.seo_image_height,
                }),
        },
    })),
}));

// WebPage block
const webPageBlock = getWebPageBlock({
    disableWebPage: false,
    pageUrl: blogpageUrl,
    siteName: title || siteConfig.site?.siteName,
    websiteId,
    orgId,
    imageId: `${blogpageUrl}#image`,
    breadcrumbId: `${blogpageUrl}#breadcrumb`,
    description,
    hasPartList: itemLists,
    disableHasPart: false,
});

// BreadcrumbList
const breadcrumbBlock = getBreadcrumbBlock({
    disableBreadcrumb,
    breadcrumbId,
    breadcrumbList,
    canonical: blogpageUrl,
});

const imageObjectBlock = getImageObjectBlock({
    disableImageObject: false,
    imageId: `${blogpageUrl}#image`,
    image,
    imageUrl,
    caption: imageCaption,
    width: imageWidth,
    height: imageHeight,
});

// WebSite
const webSiteBlock = getWebSiteBlock({
    disableWebSite: false,
    disableWebSiteSearchAction: true,
    websiteId,
    canonical: canonicalValidated,
    siteName: siteConfig.site?.siteName,
    description: siteConfig.homePageConfig.seo.description,
    orgId,
});

// --- Unified Organization + LocalBusiness block
const orgBlock = {
  '@type': 'Organization',
  '@id': orgId,
  name: siteConfig.site?.siteName,
  url: canonicalValidated,
  inLanguage: siteConfig.site.locale || 'pt_BR',
  description: siteConfig.homePageConfig.seo.description,
  logo: {
    '@type': 'ImageObject',
    inLanguage: siteConfig.site.locale || 'pt_BR',
    '@id': logoId,
    url: siteConfig.site?.logo?.url,
    contentUrl: siteConfig.site?.logo?.url,
    ...(siteConfig.site?.logo?.width ? { width: siteConfig.site.logo.width } : {}),
    ...(siteConfig.site?.logo?.height ? { height: siteConfig.site.logo.height } : {}),
    ...(siteConfig.site?.logo?.alt ? { caption: siteConfig.site.logo.alt } : {}),
  },
  image: { '@id': logoId },
  mainEntityOfPage: { '@type': 'WebPage', '@id': canonicalValidated },
};

const blocks = [
    webPageBlock,
    imageObjectBlock,
    breadcrumbBlock,
    webSiteBlock,
    orgBlock,
]
    .filter(Boolean)
    .flat();

const jsonLdGraph = {
    '@context': 'https://schema.org',
    '@graph': blocks,
};
---

<script type="application/ld+json" set:html={JSON.stringify(jsonLdGraph, null, 2)} />
