---
import JsonLdReviews from './JsonLdReviews.astro';

const {
  site,
  faqList = [],
  servicesList = [],
  reviewsList = [],
  breadcrumbList = [],
  imageUrl,
  logoUrl,
  datePublished,
  dateModified,
  inLanguage = 'pt-BR',
  disableFAQ = false,
  disableServices = false,
  disableReviews = false,
  disableBreadcrumb = false,
  disableWebSite = false,
  disableOrganization = false,
  disableImageObject = false,
  disableWebPage = false,
  ...rest
} = Astro.props;

const homepageUrl = site?.domain ? `https://${site?.domain}` : '';
const siteName = site?.name;
const description = site?.description;
const resolvedImageUrl = imageUrl ?? site?.image;
const resolvedLogoUrl = logoUrl ?? site?.logo;
const org = site?.organization ?? {
  name: siteName,
  url: homepageUrl,
  logo: resolvedLogoUrl
};
const websiteId = `${homepageUrl}#website`;
const orgId = `${homepageUrl}#organization`;
const imageId = `${homepageUrl}#primaryimage`;
const breadcrumbId = `${homepageUrl}#breadcrumb`;
const logoId = `${homepageUrl}#/schema/logo/image/`;

// WebPage block
const webPageBlock = !disableWebPage && {
  '@type': 'WebPage',
  '@id': homepageUrl,
  'url': homepageUrl,
  'name': siteName,
  'isPartOf': { '@id': websiteId },
  'about': { '@id': orgId },
  'primaryImageOfPage': { '@id': imageId },
  'image': { '@id': imageId },
  ...(resolvedImageUrl ? { 'thumbnailUrl': resolvedImageUrl } : {}),
  ...(datePublished ? { 'datePublished': datePublished } : {}),
  ...(dateModified ? { 'dateModified': dateModified } : {}),
  ...(description ? { 'description': description } : {}),
  'breadcrumb': { '@id': breadcrumbId },
  'inLanguage': inLanguage,
  'potentialAction': [
    {
      '@type': 'ReadAction',
      'target': [homepageUrl]
    }
  ]
};

// ImageObject (primary image)
const imageObjectBlock = !disableImageObject && resolvedImageUrl && {
  '@type': 'ImageObject',
  'inLanguage': inLanguage,
  '@id': imageId,
  'url': resolvedImageUrl,
  'contentUrl': resolvedImageUrl
};

// BreadcrumbList
const breadcrumbBlock = !disableBreadcrumb && {
  '@type': 'BreadcrumbList',
  '@id': breadcrumbId,
  'itemListElement': breadcrumbList.length > 0
    ? breadcrumbList
    : [
        {
          '@type': 'ListItem',
          'position': 1,
          'name': 'Home'
        }
      ]
};

// WebSite
const webSiteBlock = !disableWebSite && {
  '@type': 'WebSite',
  '@id': websiteId,
  'url': homepageUrl,
  'name': siteName,
  'description': description ?? '',
  'publisher': { '@id': orgId },
  'potentialAction': [
    {
      '@type': 'SearchAction',
      'target': {
        '@type': 'EntryPoint',
        'urlTemplate': `${homepageUrl}?s={search_term_string}`
      },
      'query-input': {
        '@type': 'PropertyValueSpecification',
        'valueRequired': true,
        'valueName': 'search_term_string'
      }
    }
  ],
  'inLanguage': inLanguage
};

// Organization (with logo as ImageObject)
const orgBlock = !disableOrganization && {
  '@type': 'Organization',
  '@id': orgId,
  'name': org.name,
  'url': org.url,
  'logo': {
    '@type': 'ImageObject',
    'inLanguage': inLanguage,
    '@id': logoId,
    'url': org.logo,
    'contentUrl': org.logo,
    ...(org.logoWidth ? { 'width': org.logoWidth } : {}),
    ...(org.logoHeight ? { 'height': org.logoHeight } : {}),
    ...(org.name ? { 'caption': org.name } : {})
  },
  'image': { '@id': logoId }
};

// FAQ block
const faqBlock = !disableFAQ && Array.isArray(faqList) && faqList.length > 0 ? {
  '@type': 'FAQPage',
  'mainEntity': faqList.map((faq) => ({
    '@type': 'Question',
    'name': faq.question,
    'acceptedAnswer': {
      '@type': 'Answer',
      'text': faq.answer
    }
  }))
} : null;

// Services block
const servicesBlock = !disableServices && Array.isArray(servicesList) && servicesList.length > 0
  ? servicesList.map((service) =>
      service.schema
        ? service.schema
        : {
            '@type': 'Service',
            'name': service.name,
            'description': service.description,
            ...(service.offers ? { offers: service.offers } : {})
          }
    )
  : null;



// VideoObjects independentes para reviews em vídeo
const videoObjects = !disableReviews && Array.isArray(reviewsList) && reviewsList.length > 0
  ? reviewsList
      .filter((review) => review.videoId && review.thumbnail && review.url)
      .map((review, idx) => ({
        '@type': 'VideoObject',
        '@id': `${homepageUrl}#review-video-${idx+1}`,
        name: review.title || '',
        description: review.reviewBody || review.title || '',
        thumbnailUrl: review.thumbnail,
        contentUrl: review.url,
        embedUrl: `https://www.youtube.com/embed/${review.videoId}`,
        ...(review.uploadDate ? { uploadDate: review.uploadDate } : {}),
        publisher: {
          '@type': 'Organization',
          name: siteName,
          logo: {
            '@type': 'ImageObject',
            url: resolvedLogoUrl
          }
        },
        mainEntityOfPage: {
          '@type': 'WebPage',
          '@id': homepageUrl
        }
      }))
  : [];

// Reviews (usando associatedMedia para vídeo, e reviewBody real)
const reviewBodySamples = [
  'Serviço rápido e sem complicações, consegui meu visto em menos de 1 mês.',
  'Equipe atenciosa e suporte excelente do início ao fim.',
  'Processo transparente, recomendo muito!',
  'Fui muito bem orientado, tudo aprovado sem dor de cabeça.',
  'Atendimento ágil e personalizado, nota 10!',
  'Me ajudaram em todas as etapas, super recomendo.',
  'Ótima experiência, consegui meu visto com facilidade.',
  'Profissionais competentes e serviço de confiança.'
];
const reviewsBlock = !disableReviews && Array.isArray(reviewsList) && reviewsList.length > 0
  ? reviewsList.map((review, idx) => {
      const reviewBody = review.reviewBody || review.title || reviewBodySamples[idx % reviewBodySamples.length] || 'Ótimo serviço!';
      const base = {
        '@type': 'Review',
        reviewBody,
        author: {
          '@type': 'Person',
          name: review.author || `Cliente ${siteName}`,
        },
        reviewRating: {
          '@type': 'Rating',
          ratingValue: review.ratingValue || 5,
          bestRating: 5,
          worstRating: 1,
        },
        mainEntityOfPage: {
          '@type': 'WebPage',
          '@id': homepageUrl
        }
      };
      if (review.videoId && review.thumbnail && review.url) {
        return {
          ...base,
          associatedMedia: {
            '@id': `${homepageUrl}#review-video-${idx+1}`
          }
        };
      }
      return base;
    })
  : [];


// AggregateRating calculation
let aggregateRating = null;
if (reviewsBlock.length > 0) {
  const ratings = reviewsBlock.map(r => (r.reviewRating && r.reviewRating.ratingValue) ? Number(r.reviewRating.ratingValue) : 5);
  const reviewCount = ratings.length;
  const ratingValue = reviewCount > 0 ? (ratings.reduce((a, b) => a + b, 0) / reviewCount) : 5;
  aggregateRating = {
    '@type': 'AggregateRating',
    ratingValue: Number(ratingValue.toFixed(1)),
    reviewCount
  };
}

// LocalBusiness principal com reviews agrupados, aggregateRating, address obrigatório e mainEntityOfPage
const localBusinessBlock = !disableOrganization && {
  '@type': 'LocalBusiness',
  '@id': orgId,
  name: siteName,
  url: homepageUrl,
  logo: {
    '@type': 'ImageObject',
    'inLanguage': inLanguage,
    '@id': logoId,
    'url': resolvedLogoUrl,
    'contentUrl': resolvedLogoUrl,
    ...(org.logoWidth ? { 'width': org.logoWidth } : {}),
    ...(org.logoHeight ? { 'height': org.logoHeight } : {}),
    ...(org.name ? { 'caption': org.name } : {})
  },
  image: { '@id': logoId },
  address: site?.address || {
    '@type': 'PostalAddress',
    streetAddress: 'Rua Exemplo, 123',
    addressLocality: 'São Paulo',
    addressRegion: 'SP',
    postalCode: '01234-567',
    addressCountry: 'BR'
  },
  ...(reviewsBlock.length > 0 ? { review: reviewsBlock } : {}),
  ...(aggregateRating && reviewsBlock.length > 1 ? { aggregateRating } : {}),
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': homepageUrl
  }
};

const blocks = [
  webPageBlock,
  imageObjectBlock,
  breadcrumbBlock,
  webSiteBlock,
  localBusinessBlock,
  faqBlock,
  servicesBlock,
  ...videoObjects
].filter(Boolean).flat();

const jsonLdGraph = {
  '@context': 'https://schema.org',
  '@graph': blocks
};
---

<script type="application/ld+json" set:html={JSON.stringify(jsonLdGraph, null, 2)}></script>
