---
import JsonLdReviews from './JsonLdReviews.astro';

const {
  site,
  faqList = [],
  servicesList = [],
  reviewsList = [],
  breadcrumbList = [],
  imageUrl,
  logoUrl,
  datePublished,
  dateModified,
  inLanguage = 'pt-BR',
  disableFAQ = false,
  disableServices = false,
  disableReviews = false,
  disableBreadcrumb = false,
  disableWebSite = false,
  disableOrganization = false,
  disableImageObject = false,
  disableWebPage = false,
  ...rest
} = Astro.props;

const homepageUrl = site?.domain;
const siteName = site?.name;
const description = site?.description;
const resolvedImageUrl = imageUrl ?? site?.image;
const resolvedLogoUrl = logoUrl ?? site?.logo;
const org = site?.organization ?? {
  name: siteName,
  url: homepageUrl,
  logo: resolvedLogoUrl
};
const websiteId = `${homepageUrl}#website`;
const orgId = `${homepageUrl}#organization`;
const imageId = `${homepageUrl}#primaryimage`;
const breadcrumbId = `${homepageUrl}#breadcrumb`;
const logoId = `${homepageUrl}#/schema/logo/image/`;

// WebPage block
const webPageBlock = !disableWebPage && {
  '@type': 'WebPage',
  '@id': homepageUrl,
  'url': homepageUrl,
  'name': siteName,
  'isPartOf': { '@id': websiteId },
  'about': { '@id': orgId },
  'primaryImageOfPage': { '@id': imageId },
  'image': { '@id': imageId },
  ...(resolvedImageUrl ? { 'thumbnailUrl': resolvedImageUrl } : {}),
  ...(datePublished ? { 'datePublished': datePublished } : {}),
  ...(dateModified ? { 'dateModified': dateModified } : {}),
  ...(description ? { 'description': description } : {}),
  'breadcrumb': { '@id': breadcrumbId },
  'inLanguage': inLanguage,
  'potentialAction': [
    {
      '@type': 'ReadAction',
      'target': [homepageUrl]
    }
  ]
};

// ImageObject (primary image)
const imageObjectBlock = !disableImageObject && resolvedImageUrl && {
  '@type': 'ImageObject',
  'inLanguage': inLanguage,
  '@id': imageId,
  'url': resolvedImageUrl,
  'contentUrl': resolvedImageUrl
};

// BreadcrumbList
const breadcrumbBlock = !disableBreadcrumb && {
  '@type': 'BreadcrumbList',
  '@id': breadcrumbId,
  'itemListElement': breadcrumbList.length > 0
    ? breadcrumbList
    : [
        {
          '@type': 'ListItem',
          'position': 1,
          'name': 'Home'
        }
      ]
};

// WebSite
const webSiteBlock = !disableWebSite && {
  '@type': 'WebSite',
  '@id': websiteId,
  'url': homepageUrl,
  'name': siteName,
  'description': description ?? '',
  'publisher': { '@id': orgId },
  'potentialAction': [
    {
      '@type': 'SearchAction',
      'target': {
        '@type': 'EntryPoint',
        'urlTemplate': `${homepageUrl}?s={search_term_string}`
      },
      'query-input': {
        '@type': 'PropertyValueSpecification',
        'valueRequired': true,
        'valueName': 'search_term_string'
      }
    }
  ],
  'inLanguage': inLanguage
};

// Organization (with logo as ImageObject)
const orgBlock = !disableOrganization && {
  '@type': 'Organization',
  '@id': orgId,
  'name': org.name,
  'url': org.url,
  'logo': {
    '@type': 'ImageObject',
    'inLanguage': inLanguage,
    '@id': logoId,
    'url': org.logo,
    'contentUrl': org.logo,
    ...(org.logoWidth ? { 'width': org.logoWidth } : {}),
    ...(org.logoHeight ? { 'height': org.logoHeight } : {}),
    ...(org.name ? { 'caption': org.name } : {})
  },
  'image': { '@id': logoId }
};

// FAQ block
const faqBlock = !disableFAQ && Array.isArray(faqList) && faqList.length > 0 ? {
  '@type': 'FAQPage',
  'mainEntity': faqList.map((faq) => ({
    '@type': 'Question',
    'name': faq.question,
    'acceptedAnswer': {
      '@type': 'Answer',
      'text': faq.answer
    }
  }))
} : null;

// Services block
const servicesBlock = !disableServices && Array.isArray(servicesList) && servicesList.length > 0
  ? servicesList.map((service) =>
      service.schema
        ? service.schema
        : {
            '@type': 'Service',
            'name': service.name,
            'description': service.description,
            ...(service.offers ? { offers: service.offers } : {})
          }
    )
  : null;

const blocks = [
  webPageBlock,
  imageObjectBlock,
  breadcrumbBlock,
  webSiteBlock,
  orgBlock,
  faqBlock,
  servicesBlock
].filter(Boolean).flat();

const jsonLdGraph = {
  '@context': 'https://schema.org',
  '@graph': blocks
};
---

<script type="application/ld+json" set:html={JSON.stringify(jsonLdGraph, null, 2)}></script>
{!disableReviews && (
  <JsonLdReviews reviews={reviewsList} />
)}
