---
import { getWebSiteBlock } from './JsonLdWebSiteBlock.astro';
import { getOrganizationBlock } from './JsonLdOrganizationBlock.astro';
import { getWebPageBlock } from './JsonLdWebPageBlock.astro';
import { getBreadcrumbBlock } from './JsonLdBreadcrumbBlock.astro';
import { getImageObjectBlock } from './JsonLdImageObjectBlock.astro';


const {
    site,
    faqList = [],
    servicesList = [],
    reviewsList = [],
    breadcrumbList = [],
    disableFAQ = false,
    disableServices = false,
    disableReviews = false,
    disableBreadcrumb = false,
    disableWebSite = false,
    disableOrganization = false,
    disableImageObject = false,
    disableWebPage = false,
    disableWebSiteSearchAction = true,
    ...rest
} = Astro.props;

const homepageUrl = site?.domain ? `https://${site?.domain}` : '';
const siteName = site?.name;
const description = site?.description;
const org = site?.organization ?? {
    name: siteName,
    url: homepageUrl,
    logo: site?.logo,
};
const websiteId = `${homepageUrl}#website`;
const orgId = `${homepageUrl}#organization`;
const imageId = `${homepageUrl}#primaryimage`;
const breadcrumbId = `${homepageUrl}#breadcrumb`;
const logoId = `${homepageUrl}#/schema/logo/image/`;

// WebPage block
const webPageBlock = getWebPageBlock({
    disableWebPage,
    homepageUrl,
    siteName,
    websiteId,
    orgId,
    imageId,
    breadcrumbId,
    site,
    description,
});

// ImageObject (primary image)
const imageObjectBlock = getImageObjectBlock({
    disableImageObject,
    site,
    imageId,
});

// BreadcrumbList
const breadcrumbBlock = getBreadcrumbBlock({
    disableBreadcrumb,
    breadcrumbId,
    breadcrumbList,
    homepageUrl,
});

// WebSite
const webSiteBlock = !disableWebSite && getWebSiteBlock({
    disableWebSite,
    disableWebSiteSearchAction,
    websiteId,
    homepageUrl,
    siteName,
    description,
    orgId,
    site,
});

// Organization (with logo as ImageObject)
const orgBlock = getOrganizationBlock({
    disableOrganization,
    orgId,
    org,
    logoId,
    site,
});

// FAQ block
const faqBlock =
    !disableFAQ && Array.isArray(faqList) && faqList.length > 0
        ? {
              '@type': 'FAQPage',
              mainEntity: faqList.map((faq) => ({
                  '@type': 'Question',
                  name: faq.question,
                  acceptedAnswer: {
                      '@type': 'Answer',
                      text: faq.answer,
                  },
              })),
          }
        : null;

// Services block
const servicesBlock =
    !disableServices && Array.isArray(servicesList) && servicesList.length > 0
        ? servicesList.map((service) =>
              service.schema
                  ? service.schema
                  : {
                        '@type': 'Service',
                        name: service.name,
                        description: service.description,
                        ...(service.offers ? { offers: service.offers } : {}),
                        provider: { '@id': orgId },
                    }
          )
        : null;

// VideoObjects independentes para reviews em vídeo
const videoObjects =
    !disableReviews && Array.isArray(reviewsList) && reviewsList.length > 0
        ? reviewsList
              .filter((review) => review.videoId && review.thumbnail && review.url)
              .map((review, idx) => {
                  // Ensure uploadDate is in ISO 8601 with timezone (e.g., 2023-05-02T00:00:00-03:00)
                  let uploadDate = review.uploadDate;
                  if (uploadDate && !uploadDate.includes('T')) {
                      uploadDate = `${uploadDate}T00:00:00-03:00`;
                  }
                  return {
                      '@type': 'VideoObject',
                      '@id': `${homepageUrl}#review-video-${idx + 1}`,
                      name: review.title || '',
                      description: review.reviewBody || review.title || '',
                      thumbnailUrl: review.thumbnail,
                      contentUrl: review.url,
                      embedUrl: `https://www.youtube.com/embed/${review.videoId}`,
                      ...(uploadDate ? { uploadDate } : {}),
                      publisher: {
                          '@type': 'Organization',
                          name: siteName,
                          logo: {
                              '@type': 'ImageObject',
                              url: site?.logo,
                          },
                      },
                      mainEntityOfPage: {
                          '@type': 'WebPage',
                          '@id': homepageUrl,
                      },
                  };
              })
        : [];

const reviewsBlock =
    !disableReviews && Array.isArray(reviewsList) && reviewsList.length > 0
        ? reviewsList.map((review, idx) => {
              const reviewBody = review.reviewBody || review.title || 'Ótimo serviço!';
              const base = {
                  '@type': 'Review',
                  reviewBody,
                  author: {
                      '@type': 'Person',
                      name: review.author || `Cliente ${siteName}`,
                  },
                  reviewRating: {
                      '@type': 'Rating',
                      ratingValue: review.ratingValue || 5,
                      bestRating: 5,
                      worstRating: 1,
                  },
                  mainEntityOfPage: {
                      '@type': 'WebPage',
                      '@id': homepageUrl,
                  },
              };
              if (review.videoId && review.thumbnail && review.url) {
                  return {
                      ...base,
                      associatedMedia: {
                          '@id': `${homepageUrl}#review-video-${idx + 1}`,
                      },
                  };
              }
              return base;
          })
        : [];

// AggregateRating calculation
let aggregateRating = null;
if (reviewsBlock.length > 0) {
    const ratings = reviewsBlock.map((r) =>
        r.reviewRating && r.reviewRating.ratingValue ? Number(r.reviewRating.ratingValue) : 5
    );
    const reviewCount = ratings.length;
    const ratingValue = reviewCount > 0 ? ratings.reduce((a, b) => a + b, 0) / reviewCount : 5;
    aggregateRating = {
        '@type': 'AggregateRating',
        ratingValue: Number(ratingValue.toFixed(1)),
        reviewCount,
    };
}

// LocalBusiness principal com reviews agrupados, aggregateRating, address obrigatório e mainEntityOfPage
const localBusinessBlock = !disableOrganization && {
    '@type': 'LocalBusiness',
    '@id': orgId,
    name: siteName,
    url: homepageUrl,
    logo: {
        '@type': 'ImageObject',
        inLanguage: site.language,
        '@id': logoId,
        url: site?.logo,
        contentUrl: site?.logo,
        ...(org.logoWidth ? { width: org.logoWidth } : {}),
        ...(org.logoHeight ? { height: org.logoHeight } : {}),
        ...(org.name ? { caption: org.name } : {}),
    },
    image: { '@id': logoId },
    address: site?.address || {
        '@type': 'PostalAddress',
        streetAddress: 'Rua Exemplo, 123',
        addressLocality: 'São Paulo',
        addressRegion: 'SP',
        postalCode: '01234-567',
        addressCountry: 'BR',
    },
    telephone: site?.contactPoint?.telephone || '+55 11 99999-9999',
    contactPoint: site?.contactPoint || {
        '@type': 'ContactPoint',
        telephone: site?.contactPoint?.telephone || '+55 11 99999-9999',
        contactType: 'customer service',
        areaServed: 'BR',
        availableLanguage: ['Portuguese', 'English'],
    },
    ...(reviewsBlock.length > 0 ? { review: reviewsBlock } : {}),
    ...(aggregateRating && reviewsBlock.length > 1 ? { aggregateRating } : {}),
    priceRange: site?.priceRange || '$$',
    mainEntityOfPage: {
        '@type': 'WebPage',
        '@id': homepageUrl,
    },
};

const blocks = [
    webPageBlock,
    imageObjectBlock,
    breadcrumbBlock,
    webSiteBlock,
    orgBlock,
    localBusinessBlock,
    faqBlock,
    servicesBlock,
    ...videoObjects,
]
    .filter(Boolean)
    .flat();

const jsonLdGraph = {
    '@context': 'https://schema.org',
    '@graph': blocks,
};
---

<script type="application/ld+json" set:html={JSON.stringify(jsonLdGraph, null, 2)} />
