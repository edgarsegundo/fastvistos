---
/**
 * ðŸš¨ AUTO-GENERATED FILE. DO NOT EDIT.
 * This file is generated by sync-blog.js and will be overwritten.
 * To customize, edit the template.
 */

import { getCollection } from 'astro:content';
import SharedBlogLayout from '../../layouts/SharedBlogLayout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import SidebarAbove from '../../components/SidebarAbove.astro';
import SidebarBelow from '../../components/SidebarBelow.astro';

import { siteConfig } from '../../site-config.ts';
import { BlogService } from '../../lib/blog-service.ts';
import { estimateReadingTime } from '../../lib/utils.ts';
import JsonLdBlogPost from '../../components/JsonLdBlogPost.astro';
import '../../styles/markdown-blog.css';


// Generate static paths from the markdown files in content/blog/
export async function getStaticPaths() {
    const blogEntries = await getCollection('blog');

    return blogEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry },
    }));
}

// Get the markdown entry from props
const { entry } = Astro.props;

// Render the markdown content
const { Content, headings } = await entry.render();

const blogConfigFromDb = await BlogService.getBlogConfigFromDb();
const articleFromDb =  await BlogService.getArticleBySlugFromDb(entry.slug);
console.log('ðŸ›‘...ðŸ›‘...ðŸ›‘ entry', entry);
---

<SharedBlogLayout>
    <!-- Additional head content specific to this layout -->
    <Fragment slot="head">
        <JsonLdBlogPost 
            site={siteConfig.site}
            blogConfigFromDb={blogConfigFromDb}
            articleFromDb={articleFromDb}
            pubDate={entry.data.pubDate}
            updatedDate={entry.data.updatedDate}
            wordCount={entry.data.wordCount}
        />
    </Fragment>

    <div class="blog-layout-container">
        <!-- Main Article Content -->
        <article class="blog-article">
            <header class="article-header">
                <h1 class="article-title">{entry.data.title}</h1>

                <div class="article-meta">
                    <time datetime={entry.data.pubDate}>
                        {
                            new Date(entry.data.pubDate).toLocaleDateString('pt-BR', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                            })
                        }
                    </time>

                    <span class="article-reading-time">
                        {estimateReadingTime(Number(entry.data.wordCount))} min leitura
                    </span>

                    {entry.data.topic && <span class="article-topic">{entry.data.topic}</span>}
                </div>

                {
                    entry.data.image && entry.data.image !== '/assets/images/blog/' && (
                        <div class="article-image-wrapper">
                            <img src={entry.data.image} alt={entry.data.title} class="article-image" />
                        </div>
                    )
                }
            </header>

            <!-- Professional styled markdown content -->
            <div class="blog-content">
                <Content />
            </div>
        </article>

        <!-- Table of Contents Sidebar -->
        <aside class="sidebar-container">
            <!-- CustomizaÃ§Ã£o Acima do TOC -->
            <SidebarAbove />

            <!-- Table of Contents -->
            <TableOfContents headings={headings} />

            <!-- CustomizaÃ§Ã£o Abaixo do TOC -->
            <SidebarBelow />
        </aside>
    </div>
</SharedBlogLayout>

<style>
    .blog-layout-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 3rem;
        align-items: start;
    }

    .blog-article {
        min-width: 0; /* Prevents grid overflow */
    }

    .sidebar-container {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .article-image-wrapper {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 3rem 0;
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
        .blog-layout-container {
            grid-template-columns: 1fr;
            gap: 2rem;
            padding: 1.5rem;
        }
    }

    @media (max-width: 768px) {
        .blog-layout-container {
            padding: 1rem;
            gap: 1.5rem;
        }
        .article-image-wrapper {
            margin: 2rem 0;
        }
    }
</style>
