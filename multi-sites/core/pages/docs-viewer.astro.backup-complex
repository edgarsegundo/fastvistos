---
/**
 * Documentation Viewer - Redirect to Simple Viewer
 * 
 * This page redirects to the working simple documentation viewer
 * to avoid complex editor.md dependency issues.
 */
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Documentation Viewer</title>
    <script>
        // Redirect to the working simple viewer
        window.location.href = '/docs-simple';
    </script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            text-align: center;
        }
        .redirect-message {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            max-width: 500px;
        }
        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid white;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="redirect-message">
        <div class="spinner"></div>
        <h2>Redirecting to Documentation Viewer...</h2>
        <p>Taking you to the improved documentation system.</p>
        <p><a href="/docs-simple" style="color: white; text-decoration: underline;">Click here if not redirected automatically</a></p>
    </div>
</body>
</html>entation Viewer and Editor
 * 
 * This page provides a comprehensive interface for viewing and editing
 * all markdown documentation files in the project using editor.md.
 * It demonstrates the revolutionary documentation system in action.
 */

// For now, we'll use a static list of documents that will be populated via API
const documents = [];
const documentsByCategory = {};
const totalDocs = 0;
const totalWords = 0;
const totalSize = 0;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Revolutionary Documentation System - Viewer & Editor</title>
    
    <!-- Editor.md CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/css/editormd.min.css" />
    
    <!-- Custom styles -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.1rem;
            color: #666;
            margin-bottom: 20px;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 30px;
            min-height: calc(100vh - 300px);
        }
        
        .sidebar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            max-height: calc(100vh - 300px);
        }
        
        .sidebar h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.3rem;
        }
        
        .category {
            margin-bottom: 25px;
        }
        
        .category h3 {
            color: #667eea;
            font-size: 1.1rem;
            margin-bottom: 10px;
            padding-bottom: 5px;
            border-bottom: 2px solid #667eea;
        }
        
        .doc-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .doc-item:hover {
            background: #e3f2fd;
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }
        
        .doc-item.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: #667eea;
        }
        
        .doc-title {
            font-weight: 600;
            margin-bottom: 5px;
            font-size: 1rem;
        }
        
        .doc-description {
            font-size: 0.85rem;
            color: #666;
            margin-bottom: 8px;
            line-height: 1.4;
        }
        
        .doc-item.active .doc-description {
            color: rgba(255, 255, 255, 0.9);
        }
        
        .doc-meta {
            display: flex;
            justify-content: space-between;
            font-size: 0.75rem;
            color: #999;
        }
        
        .doc-item.active .doc-meta {
            color: rgba(255, 255, 255, 0.8);
        }
        
        .editor-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
        }
        
        .editor-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .editor-title {
            font-size: 1.3rem;
            color: #333;
            font-weight: 600;
        }
        
        .editor-actions {
            display: flex;
            gap: 10px;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }
        
        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 1px solid #e9ecef;
        }
        
        .btn-secondary:hover {
            background: #e9ecef;
        }
        
        .editor-wrapper {
            flex: 1;
            min-height: 500px;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .welcome-message {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 500px;
            text-align: center;
            color: #666;
        }
        
        .welcome-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }
        
        .welcome-text {
            font-size: 1.2rem;
            margin-bottom: 10px;
        }
        
        .welcome-subtext {
            font-size: 1rem;
            opacity: 0.7;
        }
        
        .search-box {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 1rem;
            margin-bottom: 20px;
            transition: border-color 0.3s ease;
        }
        
        .search-box:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
            font-size: 1.1rem;
            color: #667eea;
        }
        
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        @media (max-width: 968px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                max-height: 400px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Revolutionary Documentation System</h1>
            <p>Advanced Documentation Viewer & Editor - Explore the future of development documentation</p>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number" id="totalDocsCount">0</div>
                    <div class="stat-label">Documents</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalWordsCount">0K</div>
                    <div class="stat-label">Words</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalSizeCount">0KB</div>
                    <div class="stat-label">Total Size</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="categoriesCount">0</div>
                    <div class="stat-label">Folders</div>
                </div>
            </div>
        </div>
        
        <div class="main-content">
            <div class="sidebar">
                <h2>📚 Documentation Library</h2>
                
                <input 
                    type="text" 
                    id="searchBox" 
                    class="search-box" 
                    placeholder="🔍 Search documentation..."
                />
                
                <div id="documentList">
                    <div class="loading">
                        <div class="spinner"></div>
                        Loading documentation...
                    </div>
                </div>
            </div>
            
            <div class="editor-container">
                <div class="editor-header">
                    <div class="editor-title" id="editorTitle">Select a document to view</div>
                    <div class="editor-actions">
                        <button class="btn btn-secondary" id="viewModeBtn">👁️ View</button>
                        <button class="btn btn-secondary" id="editModeBtn">✏️ Edit</button>
                        <button class="btn btn-primary" id="saveBtn" style="display: none;">💾 Save</button>
                        <button class="btn btn-secondary" id="downloadBtn" style="display: none;">⬇️ Download</button>
                    </div>
                </div>
                
                <div class="editor-wrapper">
                    <div class="welcome-message" id="welcomeMessage">
                        <div class="welcome-icon">📖</div>
                        <div class="welcome-text">Welcome to the Revolutionary Documentation System</div>
                        <div class="welcome-subtext">Select a document from the sidebar to start viewing or editing</div>
                    </div>
                    
                    <div id="editormd" style="display: none;"></div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Editor.md JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/lib/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/lib/prettify.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/lib/raphael.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/lib/underscore.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/lib/sequence-diagram.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/lib/flowchart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/lib/jquery.flowchart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/editor.md@1.5.0/editormd.min.js"></script>
    
    <script>
        class DocumentationViewer {
            constructor() {
                this.editor = null;
                this.currentDoc = null;
                this.isEditMode = false;
                this.documents = [];
                this.documentsByFolder = {};
                this.init();
            }
            
            async init() {
                await this.loadDocumentList();
                this.setupEventListeners();
                this.setupSearch();
                this.initializeEditor();
            }
            
            async loadDocumentList() {
                try {
                    const response = await fetch('/api/docs-list');
                    if (!response.ok) {
                        throw new Error(`Failed to load documents: ${response.statusText}`);
                    }
                    
                    const data = await response.json();
                    this.documents = data.documents;
                    this.documentsByFolder = data.documentsByFolder;
                    
                    // Update statistics
                    this.updateStats(data.stats);
                    
                    // Render document list
                    this.renderDocumentList();
                    
                } catch (error) {
                    console.error('Error loading document list:', error);
                    this.showError('Failed to load documentation list');
                }
            }
            
            updateStats(stats) {
                document.getElementById('totalDocsCount').textContent = stats.totalDocs;
                document.getElementById('totalWordsCount').textContent = Math.round(stats.totalWords / 1000) + 'K';
                document.getElementById('totalSizeCount').textContent = Math.round(stats.totalSize / 1024) + 'KB';
                document.getElementById('categoriesCount').textContent = stats.folders;
            }
            
            renderDocumentList() {
                const documentListElement = document.getElementById('documentList');
                
                if (Object.keys(this.documentsByFolder).length === 0) {
                    documentListElement.innerHTML = '<div class="welcome-message">No documentation found</div>';
                    return;
                }
                
                let html = '';
                for (const [folder, docs] of Object.entries(this.documentsByFolder)) {
                    html += `
                        <div class="category">
                            <h3>📁 ${folder === 'Root' ? 'Root Directory' : folder} (${docs.length})</h3>
                            ${docs.map(doc => `
                                <div class="doc-item" data-path="${doc.path}" data-title="${doc.fileName}">
                                    <div class="doc-title">${doc.fileName}</div>
                                    <div class="doc-meta">
                                        <span>${doc.wordCount.toLocaleString()} words</span>
                                        <span>${(doc.size / 1024).toFixed(1)}KB</span>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                }
                
                documentListElement.innerHTML = html;
                
                // Re-setup event listeners for new elements
                this.setupDocumentEventListeners();
            }
            
            setupDocumentEventListeners() {
                document.querySelectorAll('.doc-item').forEach(item => {
                    item.addEventListener('click', () => {
                        this.selectDocument(item.dataset.path, item.dataset.title);
                    });
                });
            }
            
            setupEventListeners() {
                // Mode switching
                document.getElementById('viewModeBtn').addEventListener('click', () => {
                    this.switchToViewMode();
                });
                
                document.getElementById('editModeBtn').addEventListener('click', () => {
                    this.switchToEditMode();
                });
                
                // Save functionality
                document.getElementById('saveBtn').addEventListener('click', () => {
                    this.saveDocument();
                });
                
                // Download functionality
                document.getElementById('downloadBtn').addEventListener('click', () => {
                    this.downloadDocument();
                });
            }
            
            setupSearch() {
                const searchBox = document.getElementById('searchBox');
                searchBox.addEventListener('input', (e) => {
                    this.filterDocuments(e.target.value);
                });
            }
            
            filterDocuments(query) {
                const normalizedQuery = query.toLowerCase();
                
                document.querySelectorAll('.doc-item').forEach(item => {
                    const fileName = item.dataset.title.toLowerCase();
                    const matches = fileName.includes(normalizedQuery);
                    
                    item.style.display = matches ? 'block' : 'none';
                });
                
                // Hide empty categories
                document.querySelectorAll('.category').forEach(category => {
                    const visibleItems = category.querySelectorAll('.doc-item[style*="block"], .doc-item:not([style])');
                    category.style.display = visibleItems.length > 0 ? 'block' : 'none';
                });
            }
            
            initializeEditor() {
                // Wait for editormd to be available
                if (typeof editormd === 'undefined') {
                    console.log('Editor.md not ready yet, retrying...');
                    setTimeout(() => this.initializeEditor(), 100);
                    return;
                }
                
                try {
                    // Initialize editor.md but keep it hidden initially
                    this.editor = editormd("editormd", {
                        width: "100%",
                        height: "500px",
                        path: "https://cdn.jsdelivr.net/npm/editor.md@1.5.0/lib/",
                        markdown: "",
                        codeFold: true,
                        saveHTMLToTextarea: true,
                        searchReplace: true,
                        htmlDecode: "style,script,iframe",
                        emoji: true,
                        taskList: true,
                        tocm: true,
                        tex: true,
                        flowChart: true,
                        sequenceDiagram: true,
                        syncScrolling: "single",
                        toolbar: true,
                        previewCodeHighlight: true,
                        watch: false, // Start in view mode
                        toolbarIcons: [
                            "undo", "redo", "|",
                            "bold", "del", "italic", "quote", "ucwords", "uppercase", "lowercase", "|",
                            "h1", "h2", "h3", "h4", "h5", "h6", "|",
                            "list-ul", "list-ol", "hr", "|",
                            "link", "reference-link", "image", "code", "preformatted-text", "code-block", "table", "datetime", "emoji", "html-entities", "pagebreak", "|",
                            "goto-line", "watch", "preview", "fullscreen", "clear", "search", "|",
                            "help", "info"
                        ]
                    });
                    console.log('Editor initialized successfully');
                } catch (error) {
                    console.error('Error initializing editor:', error);
                    this.showError('Failed to initialize editor');
                }
            }
            
            async selectDocument(path, title) {
                try {
                    // Update UI
                    document.querySelectorAll('.doc-item').forEach(item => {
                        item.classList.remove('active');
                    });
                    
                    const selectedItem = document.querySelector(`[data-path="${path}"]`);
                    if (selectedItem) {
                        selectedItem.classList.add('active');
                    }
                    
                    document.getElementById('editorTitle').textContent = title;
                    document.getElementById('welcomeMessage').style.display = 'none';
                    document.getElementById('editormd').style.display = 'block';
                    document.getElementById('downloadBtn').style.display = 'inline-block';
                    
                    // Show loading state
                    this.showLoading();
                    
                    // Load document content
                    const response = await fetch(`/api/docs/${encodeURIComponent(path)}`);
                    if (!response.ok) {
                        throw new Error(`Failed to load document: ${response.statusText}`);
                    }
                    
                    const content = await response.text();
                    this.currentDoc = { path, title, content };
                    
                    // Check if editor is available before using it
                    if (this.editor && this.editor.setMarkdown) {
                        this.editor.setMarkdown(content);
                    } else {
                        console.warn('Editor not ready yet, displaying content in preview mode');
                        const editorElement = document.getElementById('editormd');
                        if (editorElement) {
                            editorElement.innerHTML = `
                                <div style="padding: 20px; background: white; border-radius: 10px; max-height: 500px; overflow-y: auto;">
                                    <h3>${title}</h3>
                                    <pre style="white-space: pre-wrap; font-family: monospace; line-height: 1.5;">${content}</pre>
                                </div>
                            `;
                        }
                    }
                    this.hideLoading();
                    
                } catch (error) {
                    console.error('Error loading document:', error);
                    this.showError('Failed to load document. Please try again.');
                }
            }
            
            switchToViewMode() {
                if (this.editor && this.editor.previewing) {
                    this.editor.previewing();
                    this.isEditMode = false;
                    
                    const viewBtn = document.getElementById('viewModeBtn');
                    const editBtn = document.getElementById('editModeBtn');
                    const saveBtn = document.getElementById('saveBtn');
                    
                    if (viewBtn) {
                        viewBtn.classList.add('btn-primary');
                        viewBtn.classList.remove('btn-secondary');
                    }
                    if (editBtn) {
                        editBtn.classList.add('btn-secondary');
                        editBtn.classList.remove('btn-primary');
                    }
                    if (saveBtn) {
                        saveBtn.style.display = 'none';
                    }
                } else {
                    console.warn('Editor not available for view mode');
                }
            }
            
            switchToEditMode() {
                if (this.editor && this.editor.watch) {
                    this.editor.watch();
                    this.isEditMode = true;
                    
                    const editBtn = document.getElementById('editModeBtn');
                    const viewBtn = document.getElementById('viewModeBtn');
                    const saveBtn = document.getElementById('saveBtn');
                    
                    if (editBtn) {
                        editBtn.classList.add('btn-primary');
                        editBtn.classList.remove('btn-secondary');
                    }
                    if (viewBtn) {
                        viewBtn.classList.add('btn-secondary');
                        viewBtn.classList.remove('btn-primary');
                    }
                    if (saveBtn) {
                        saveBtn.style.display = 'inline-block';
                    }
                } else {
                    console.warn('Editor not available for edit mode');
                    this.showError('Editor not ready. Please wait a moment and try again.');
                }
            }
            
            async saveDocument() {
                if (!this.currentDoc || !this.isEditMode) return;
                
                try {
                    const content = this.editor.getMarkdown();
                    
                    const response = await fetch(`/api/docs/${encodeURIComponent(this.currentDoc.path)}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'text/plain',
                        },
                        body: content
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Failed to save document: ${response.statusText}`);
                    }
                    
                    this.currentDoc.content = content;
                    this.showSuccess('Document saved successfully!');
                    
                } catch (error) {
                    console.error('Error saving document:', error);
                    this.showError('Failed to save document. Please try again.');
                }
            }
            
            downloadDocument() {
                if (!this.currentDoc) return;
                
                const content = this.isEditMode ? this.editor.getMarkdown() : this.currentDoc.content;
                const blob = new Blob([content], { type: 'text/markdown' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = this.currentDoc.path.split('/').pop();
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }
            
            showLoading() {
                const editorElement = document.getElementById('editormd');
                editorElement.innerHTML = '<div class="loading"><div class="spinner"></div>Loading document...</div>';
            }
            
            hideLoading() {
                // Editor.md will replace the content automatically
            }
            
            showSuccess(message) {
                this.showNotification(message, 'success');
            }
            
            showError(message) {
                this.showNotification(message, 'error');
            }
            
            showNotification(message, type) {
                // Simple notification system
                const notification = document.createElement('div');
                notification.className = `notification notification-${type}`;
                notification.textContent = message;
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 15px 20px;
                    border-radius: 8px;
                    color: white;
                    font-weight: 500;
                    z-index: 10000;
                    animation: slideIn 0.3s ease;
                    background: ${type === 'success' ? '#28a745' : '#dc3545'};
                `;
                
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => {
                        document.body.removeChild(notification);
                    }, 300);
                }, 3000);
            }
        }
        
        // Add notification animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
        
        // Initialize the documentation viewer when the page loads
        $(document).ready(function() {
            // Wait a bit more for all scripts to load
            setTimeout(() => {
                try {
                    new DocumentationViewer();
                } catch (error) {
                    console.error('Error initializing DocumentationViewer:', error);
                }
            }, 500);
        });
        
        // Fallback initialization if jQuery is not available
        document.addEventListener('DOMContentLoaded', () => {
            if (typeof $ === 'undefined') {
                setTimeout(() => {
                    try {
                        new DocumentationViewer();
                    } catch (error) {
                        console.error('Error initializing DocumentationViewer:', error);
                    }
                }, 1000);
            }
        });
    </script>
</body>
</html>
